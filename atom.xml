<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mysry</title>
  
  <subtitle>Life is short, learn more!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mysry.com/"/>
  <updated>2018-01-22T15:12:06.960Z</updated>
  <id>http://www.mysry.com/</id>
  
  <author>
    <name>Mysry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>102. Binary Tree Level Order Traversal</title>
    <link href="http://www.mysry.com/2018/01/18/102-Binary-Tree-Level-Order-Traversal/"/>
    <id>http://www.mysry.com/2018/01/18/102-Binary-Tree-Level-Order-Traversal/</id>
    <published>2018-01-18T14:49:59.000Z</published>
    <updated>2018-01-22T15:12:06.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p></blockquote><h2 id="idea"><fontc color="red">Idea:</fontc></h2><p>  Here, we give two way of solve this problem, one is mark index for every level and the next is use a queue to traverse every level.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        Queue&lt;TreeNode&gt;queue = new LinkedList&lt;TreeNode&gt;();</div><div class="line">        if(root == null)</div><div class="line">            return res;</div><div class="line">        queue.add(root);</div><div class="line">        while(!queue.isEmpty())&#123;</div><div class="line">            List&lt;Integer&gt; tmp = new ArrayList&lt;Integer&gt;();</div><div class="line">            int len = queue.size();</div><div class="line">            for(int i=0;i&lt;len;i++)&#123;</div><div class="line">                TreeNode node = queue.poll();</div><div class="line">                tmp.add(node.val);</div><div class="line">                if(node.left!=null)</div><div class="line">                    queue.add(node.left);</div><div class="line">                if(node.right!=null)</div><div class="line">                    queue.add(node.right);</div><div class="line">            &#125;</div><div class="line">            res.add(tmp);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class="line">        inOrder(root, 0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    void inOrder(TreeNode* root,int depth)&#123;</div><div class="line">        if(root==NULL)</div><div class="line">            return;</div><div class="line">        if(res.size()==depth)</div><div class="line">            res.push_back(vector&lt;int&gt;());</div><div class="line">        res[depth].push_back(root-&gt;val);</div><div class="line">        inOrder(root-&gt;left,depth+1);</div><div class="line">        inOrder(root-&gt;right,depth+1);</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the level order traversal of its nodes
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>99. Recover Binary Search Tree</title>
    <link href="http://www.mysry.com/2018/01/18/99-Recover-Binary-Search-Tree/"/>
    <id>http://www.mysry.com/2018/01/18/99-Recover-Binary-Search-Tree/</id>
    <published>2018-01-18T14:05:04.000Z</published>
    <updated>2018-01-18T14:14:46.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Two elements of a binary search tree (BST) are swapped by mistake. Recover the tree without changing its structure. Note: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Inorder traversal of binary search tree. We need to find the first number which is bigger than its follow one and the last number which is smaller than its previous one.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public void recoverTree(TreeNode root) &#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        inOrder(root);</div><div class="line">        int tmp = first.val;</div><div class="line">        first.val = second.val;</div><div class="line">        second.val = tmp;</div><div class="line">    &#125;</div><div class="line">    public void inOrder(TreeNode root)&#123;</div><div class="line">        if(root==null)</div><div class="line">            return;</div><div class="line">        inOrder(root.left);</div><div class="line">        if(pre!=null&amp;&amp;pre.val&gt;root.val)&#123;</div><div class="line">            if(first==null)</div><div class="line">                first = pre;</div><div class="line">            second = root;</div><div class="line">        &#125;</div><div class="line">        pre = root;</div><div class="line">        inOrder(root.right);</div><div class="line">    &#125;</div><div class="line">    private TreeNode first=null;</div><div class="line">    private TreeNode second=null;</div><div class="line">    private TreeNode pre=null;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void recoverTree(TreeNode* root) &#123;</div><div class="line">        if(!root)</div><div class="line">            return ;</div><div class="line">        inOrder(root);</div><div class="line">        swap(first-&gt;val, second-&gt;val);</div><div class="line">    &#125;</div><div class="line">    void inOrder(TreeNode* root)&#123;</div><div class="line">        if(!root)</div><div class="line">            return;</div><div class="line">        inOrder(root-&gt;left);</div><div class="line">        if(pre&amp;&amp;pre-&gt;val&gt;root-&gt;val)&#123;</div><div class="line">            if(!first)</div><div class="line">                first = pre;</div><div class="line">            second = root;</div><div class="line">        &#125;</div><div class="line">        pre = root;</div><div class="line">        inOrder(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">private:</div><div class="line">    TreeNode* pre = NULL, *first = NULL, *second = NULL;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Two elements of a binary search tree (BST) are swapped by mistake.
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>98. Validate Binary Search Tree</title>
    <link href="http://www.mysry.com/2018/01/17/98-Validate-Binary-Search-Tree/"/>
    <id>http://www.mysry.com/2018/01/17/98-Validate-Binary-Search-Tree/</id>
    <published>2018-01-17T14:25:19.000Z</published>
    <updated>2018-01-17T14:30:40.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a binary tree, determine if it is a valid binary search tree (BST). Assume a BST is defined as follows: * The left subtree of a node contains only nodes with keys less than the node’s key. * The right subtree of a node contains only nodes with keys greater than the node’s key. * Both the left and right subtrees must also be binary search trees.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  DFS. Check every root if it is greater than left and smaller than right, then there comes two subtree, check the root of this subtree either.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public boolean isValidBST(TreeNode root) &#123;</div><div class="line">        return isvalid(root,null,null);</div><div class="line">    &#125;</div><div class="line">    public boolean isvalid(TreeNode root,TreeNode min,TreeNode max)&#123;</div><div class="line">        if(root == null)</div><div class="line">            return true;</div><div class="line">        if((min!=null&amp;&amp;root.val&lt;=min.val)||(max!=null&amp;&amp;root.val&gt;=max.val))</div><div class="line">            return false;</div><div class="line">        return isvalid(root.left,min,root)&amp;&amp;isvalid(root.right,root,max);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="orange">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool isValidBST(TreeNode* root) &#123;</div><div class="line">        return isvalid(root,NULL,NULL);</div><div class="line">    &#125;</div><div class="line">    bool isvalid(TreeNode* root,TreeNode* min, TreeNode* max)</div><div class="line">    &#123;</div><div class="line">        if(root==NULL)</div><div class="line">            return true;</div><div class="line">        if((min!=NULL&amp;&amp;root-&gt;val&lt;=min-&gt;val)||(max!=NULL&amp;&amp;root-&gt;val&gt;=max-&gt;val))</div><div class="line">            return false;</div><div class="line">        return isvalid(root-&gt;left,min,root)&amp;&amp;isvalid(root-&gt;right,root,max);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, determine if it is a valid binary search tree
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>97. Interleaving String</title>
    <link href="http://www.mysry.com/2018/01/17/97-Interleaving-String/"/>
    <id>http://www.mysry.com/2018/01/17/97-Interleaving-String/</id>
    <published>2018-01-17T13:52:56.000Z</published>
    <updated>2018-01-17T14:06:26.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  The main idea of this problem could be dynamic programming. So we can expand s1 and s2 to be a matrix, if we could find a path from start point to <code>matrix[len1][len2]</code> with all step were true, that means valid.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean isInterleave(String s1, String s2, String s3) &#123;</div><div class="line">        int len1 = s1.length(), len2 = s2.length(), len3 = s3.length();</div><div class="line">        if(len1+len2!=len3)</div><div class="line">            return false;</div><div class="line">        char[] S1 = s1.toCharArray();</div><div class="line">        char[] S2 = s2.toCharArray();</div><div class="line">        char[] S3 = s3.toCharArray();</div><div class="line">        boolean[][] map = new boolean[len1+1][len2+1];</div><div class="line">        for(int i =0;i&lt;=len1;i++)&#123;</div><div class="line">            for(int j=0;j&lt;=len2;j++)&#123;</div><div class="line">                if(i==0&amp;&amp;j==0)</div><div class="line">                    map[i][j]=true;</div><div class="line">                else if(i==0)</div><div class="line">                    map[i][j]=map[i][j-1]&amp;S3[i+j-1]==S2[j-1];</div><div class="line">                else if(j==0)</div><div class="line">                    map[i][j]=map[i-1][j]&amp;S3[i+j-1]==S1[i-1];</div><div class="line">                else</div><div class="line">                    map[i][j]=(map[i][j-1]&amp;S3[i+j-1]==S2[j-1])|(map[i-1][j]&amp;S3[i+j-1]==S1[i-1]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return map[len1][len2];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool isInterleave(string s1, string s2, string s3) &#123;</div><div class="line">        int len1 = s1.size(), len2 = s2.size(), len3 = s3.size();</div><div class="line">        if(len1+len2!=len3)</div><div class="line">            return false;</div><div class="line">        vector&lt;vector&lt;bool&gt; &gt; map(len1 + 1,vector&lt;bool&gt;(len2 + 1, false));</div><div class="line">        for(int i = 0;i&lt;= len1;i++)&#123;</div><div class="line">            for(int j = 0;j&lt;=len2;j++)&#123;</div><div class="line">                if(i==0&amp;&amp;j==0)</div><div class="line">                    map[i][j]=true;</div><div class="line">                else if(i==0)</div><div class="line">                    map[i][j]=map[i][j-1]&amp;s3[i+j-1]==s2[j-1];</div><div class="line">                else if(j==0)</div><div class="line">                    map[i][j]=map[i-1][j]&amp;s3[i+j-1]==s1[i-1];</div><div class="line">                else</div><div class="line">                    map[i][j]=(map[i][j-1]&amp;s3[i+j-1]==s2[j-1])|(map[i-1][j]&amp;s3[i+j-1]==s1[i-1]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return map[len1][len2];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given s1, s2, s3, find whether s3 is formed by the interleaving of
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>96. Unique Binary Search Trees</title>
    <link href="http://www.mysry.com/2018/01/16/96-Unique-Binary-Search-Trees/"/>
    <id>http://www.mysry.com/2018/01/16/96-Unique-Binary-Search-Trees/</id>
    <published>2018-01-16T13:39:36.000Z</published>
    <updated>2018-01-16T13:45:49.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1…n?</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  This problem is called catalan, for that it have the rules:<span class="math display">\[h(0)=h(1)=1\]</span> <span class="math display">\[h(n)=h(0)+h(n-1)+\cdots+h(n-1)h(0)\]</span>It can be smplified as:$$h(n)=(4n-2)/((n+1)*h(n-1))</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int numTrees(int n) &#123;</div><div class="line">        int [] G = new int[n+1];</div><div class="line">        G[0] = G[1] = 1;</div><div class="line">        for(int i=2; i&lt;=n; ++i) &#123;</div><div class="line">        for(int j=1; j&lt;=i; ++j) &#123;</div><div class="line">        G[i] += G[j-1] * G[i-j];</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        return G[n];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int numTrees(int n) &#123;</div><div class="line">    long long ans=1,i;</div><div class="line">    for(i=1;i&lt;=n;i++)</div><div class="line">        ans = ans*(i+n)/i;</div><div class="line">    return ans/i;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given n, how many structurally unique BST’s (binary search trees) 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>95. Unique Binary Search Trees II</title>
    <link href="http://www.mysry.com/2018/01/13/95-Unique-Binary-Search-Trees-II/"/>
    <id>http://www.mysry.com/2018/01/13/95-Unique-Binary-Search-Trees-II/</id>
    <published>2018-01-13T01:58:12.000Z</published>
    <updated>2018-01-13T02:38:48.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1…n.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Traverse the sequence from 1 to n, set every num i to be the root node, and the left subtree is (1,i-1), right subtree is (i+1,n), then construct the new subtree.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public List&lt;TreeNode&gt; generateTrees(int n) &#123;</div><div class="line">        if(n==0)&#123;</div><div class="line">            return new ArrayList&lt;TreeNode&gt;();</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">            return genTree(1,n);</div><div class="line">    &#125;</div><div class="line">    public List&lt;TreeNode&gt; genTree(int start,int end)&#123;</div><div class="line">        List&lt;TreeNode&gt; res = new ArrayList&lt;TreeNode&gt;();</div><div class="line">        if(start&gt;end)&#123;</div><div class="line">            res.add(null);</div><div class="line">        &#125;</div><div class="line">        for (int i = start ;i&lt;=end;i++)&#123;</div><div class="line">            List&lt;TreeNode&gt; leftNode = genTree(start,i-1);</div><div class="line">            List&lt;TreeNode&gt; rightNode = genTree(i+1,end);</div><div class="line">            for (TreeNode left:leftNode)&#123;</div><div class="line">                for (TreeNode right:rightNode)&#123;</div><div class="line">                    TreeNode root = new TreeNode(i);</div><div class="line">                    root.left = left;</div><div class="line">                    root.right = right;</div><div class="line">                    res.add(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;TreeNode*&gt; generateTrees(int n) &#123;</div><div class="line">        if(n==0)</div><div class="line">            return vector&lt;TreeNode*&gt;();</div><div class="line">        else</div><div class="line">            return genTree(1,n);</div><div class="line">    &#125;</div><div class="line">    vector&lt;TreeNode*&gt; genTree(int start,int end)&#123;</div><div class="line">        vector&lt;TreeNode*&gt; res;</div><div class="line">        if(start&gt;end)</div><div class="line">            res.push_back(NULL);</div><div class="line">        vector&lt;TreeNode*&gt;leftList,rightList;</div><div class="line">        for (int i = start ;i&lt;= end;i++)&#123;</div><div class="line">            leftList = genTree(start,i-1);</div><div class="line">            rightList = genTree(i+1,end);</div><div class="line">            for(auto left:leftList)&#123;</div><div class="line">                for( auto right:rightList)&#123;</div><div class="line">                    TreeNode* root = new TreeNode(i);</div><div class="line">                    root-&gt;left = left;</div><div class="line">                    root-&gt;right = right;</div><div class="line">                    res.push_back(root);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer n, generate all structurally unique BST’s (binary
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>94. Binary Tree Inorder Traversal</title>
    <link href="http://www.mysry.com/2018/01/10/94-Binary-Tree-Inorder-Traversal/"/>
    <id>http://www.mysry.com/2018/01/10/94-Binary-Tree-Inorder-Traversal/</id>
    <published>2018-01-10T14:45:52.000Z</published>
    <updated>2018-01-10T14:52:02.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a binary tree, return the inorder traversal of its nodes’ values. Note: Recursive solution is trivial, could you do it iteratively?</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Inorder traver and without recursion! we’d like to search every left branch and push it into stack untile the leaf node. The take one by one out of the stack, switch to next branch.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * public class TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode left;</div><div class="line"> *     TreeNode right;</div><div class="line"> *     TreeNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;</div><div class="line">        List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</div><div class="line">        TreeNode[] stack = new TreeNode[1000];</div><div class="line">        int index = 0;</div><div class="line">        TreeNode p = root;</div><div class="line">        while (p != null || index &gt; 0) &#123;</div><div class="line">            if(p!=null)&#123;</div><div class="line">                stack[index++] = p;</div><div class="line">                p = p.left;</div><div class="line">            &#125;else&#123;</div><div class="line">                p = stack[--index];</div><div class="line">                list.add(p.val);</div><div class="line">                p = p.right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        stack&lt;TreeNode*&gt; tmp;</div><div class="line">        while(!tmp.empty()||root!=NULL)&#123;</div><div class="line">            if(root!=NULL)&#123;</div><div class="line">                tmp.push(root);</div><div class="line">                root = root-&gt;left;</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                root = tmp.top();</div><div class="line">                res.push_back((tmp.top())-&gt;val);</div><div class="line">                tmp.pop();</div><div class="line">                root = root-&gt;right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the inorder traversal of its nodes’ va
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>93. Restore IP Addresses</title>
    <link href="http://www.mysry.com/2018/01/08/93-Restore-IP-Addresses/"/>
    <id>http://www.mysry.com/2018/01/08/93-Restore-IP-Addresses/</id>
    <published>2018-01-08T14:44:12.000Z</published>
    <updated>2018-01-08T14:50:26.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Oops!! It’s really good for the examination week has passed and so I can do things what I like now! For this problem, add for dot in the digits and check if it is valid!</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;String&gt; restoreIpAddresses(String s) &#123;</div><div class="line">        List&lt;String&gt; res = new ArrayList&lt;String&gt;();</div><div class="line">        int len = s.length();</div><div class="line">        for(int i = 1;i&lt;4;i++)&#123;</div><div class="line">            for(int j = i+1;j&lt;i+4 &amp;&amp; j&lt;len-1;j++)&#123;</div><div class="line">                for(int k = j+1;k&lt;j+4&amp;&amp;k&lt;len;k++)&#123;</div><div class="line">                    String s1 = s.substring(0,i), s2 = s.substring(i,j), s3 = s.substring(j,k), s4 = s.substring(k,len);</div><div class="line">                    if(isValid(s1)&amp;&amp;isValid(s2)&amp;&amp;isValid(s3)&amp;&amp;isValid(s4))</div><div class="line">                        res.add(s1+&apos;.&apos;+s2+&apos;.&apos;+s3+&apos;.&apos;+s4);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    public boolean isValid(String s)&#123;</div><div class="line">        if(s.length()&gt;3||s.length()==0||(s.charAt(0)==&apos;0&apos;&amp;&amp;s.length()&gt;1)||Integer.parseInt(s)&gt;255)</div><div class="line">            return false;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="orange">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;string&gt; restoreIpAddresses(string s) &#123;</div><div class="line">        vector&lt;string&gt; res;</div><div class="line">        int len = s.size();</div><div class="line">        for(int i = 1;i&lt;4;i++)&#123;</div><div class="line">            for(int j = i+1;j&lt;i+4&amp;&amp;j&lt;len-1;j++)&#123;</div><div class="line">                for(int k = j+1; k&lt;j+4&amp;&amp;k&lt;len;k++)&#123;</div><div class="line">                    string s1 = s.substr(0,i),s2 = s.substr(i,j-i), s3 = s.substr(j,k-j), s4 = s.substr(k,len-k);</div><div class="line">                    if(isValid(s1)&amp;&amp;isValid(s2)&amp;&amp;isValid(s3)&amp;&amp;isValid(s4))&#123;</div><div class="line">                        string tmp = s1+&apos;.&apos;+s2+&apos;.&apos;+s3+&apos;.&apos;+s4;</div><div class="line">                        res.push_back(tmp);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">   bool isValid(string s)&#123;</div><div class="line">        if ((s[0] == &apos;0&apos; &amp;&amp; s.size() &gt; 1)||s.size()&gt;3||(s.size()==3&amp;&amp;s&gt;&quot;255&quot;))</div><div class="line">            return false;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a string containing only digits, restore it by returning all
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>92. Reverse Linked List II</title>
    <link href="http://www.mysry.com/2017/12/19/92-Reverse-Linked-List-II/"/>
    <id>http://www.mysry.com/2017/12/19/92-Reverse-Linked-List-II/</id>
    <published>2017-12-19T14:39:49.000Z</published>
    <updated>2017-12-19T14:45:58.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Reverse a linked list from position m to n. Do it in-place and in one-pass.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> From m node, set <code>cur</code> to be the immediate node after <code>pre</code> and at each time move the immediate node after <code>cur</code> (named move) to be the immediate node after <code>pre</code>. Repeat it for n - m times.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public ListNode reverseBetween(ListNode head, int m, int n) &#123;</div><div class="line">        ListNode dummy = new ListNode(0);</div><div class="line">        dummy.next = head;</div><div class="line">        ListNode subtail = new ListNode(0);</div><div class="line">        ListNode subhead = new ListNode(0);</div><div class="line">        int count =1;</div><div class="line">        ListNode pre_cur = dummy,cur = head;</div><div class="line">        while(count&lt;=n)&#123;</div><div class="line">            ListNode tmp = cur.next;</div><div class="line">            if(count&lt;m)&#123;</div><div class="line">                pre_cur = cur;</div><div class="line">            &#125;</div><div class="line">            else if (count ==m)&#123;</div><div class="line">                subtail = cur;</div><div class="line">                subhead.next = cur;</div><div class="line">            &#125;else&#123;</div><div class="line">                cur.next = subhead.next;</div><div class="line">                subhead.next = cur;</div><div class="line">            &#125;</div><div class="line">            cur = tmp;</div><div class="line">            ++count;</div><div class="line">        &#125;</div><div class="line">        pre_cur.next = subhead.next;</div><div class="line">        subtail.next = cur;</div><div class="line">        return dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* reverseBetween(ListNode* head, int m, int n) &#123;</div><div class="line">        ListNode* newhead = new ListNode(0);</div><div class="line">        newhead-&gt;next = head;</div><div class="line">        ListNode* pre = newhead;</div><div class="line">        for (int i=0;i&lt;m-1;i++)</div><div class="line">            pre = pre-&gt;next;</div><div class="line">        ListNode* cur = pre-&gt;next;</div><div class="line">        for (int i=0;i&lt;n-m;i++)&#123;</div><div class="line">            ListNode* tmp = cur-&gt;next;</div><div class="line">            cur-&gt;next = tmp-&gt;next;</div><div class="line">            tmp-&gt;next = pre-&gt;next;</div><div class="line">            pre-&gt;next = tmp;</div><div class="line">        &#125;</div><div class="line">        return newhead-&gt;next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Reverse a linked list from position m to n. Do it in-place and in 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>91. Decode Ways</title>
    <link href="http://www.mysry.com/2017/12/18/91-Decode-Ways/"/>
    <id>http://www.mysry.com/2017/12/18/91-Decode-Ways/</id>
    <published>2017-12-18T14:02:38.000Z</published>
    <updated>2017-12-18T14:07:03.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>A message containing letters from A-Z is being encoded to numbers using the following mapping: ‘A’ -&gt; 1 ‘B’ -&gt; 2 … ‘Z’ -&gt; 26 Given an encoded message containing digits, determine the total number of ways to decode it.</p></blockquote><h2 id="idea"><font color="orange">Idea:</font></h2><p> Use the Dp method and there are three conditions for this problem.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int numDecodings(String s) &#123;</div><div class="line">        int size = s.length();</div><div class="line">        char[] t=s.toCharArray();</div><div class="line">        if(size&lt;=0||t[0]==&apos;0&apos;)</div><div class="line">            return 0;</div><div class="line">        int[] dp=new int[size+1];</div><div class="line">        dp[0]=dp[1]=1;</div><div class="line">        for(int i=1;i&lt;size;++i)&#123;</div><div class="line">            if(t[i]==&apos;0&apos;)</div><div class="line">                dp[i]=0;</div><div class="line">            if(t[i-1]==&apos;1&apos;||t[i-1]&lt;=&apos;2&apos;&amp;&amp;t[i]&lt;=&apos;6&apos;)</div><div class="line">                dp[i+1] = dp[i]+dp[i-1];</div><div class="line">            else</div><div class="line">                dp[i+1]=dp[i];</div><div class="line">        &#125;</div><div class="line">        return dp[size];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int numDecodings(string s) &#123;</div><div class="line">        int size = s.size();</div><div class="line">        if(size&lt;=0||s[0]==&apos;0&apos;)</div><div class="line">            return 0;</div><div class="line">        vector&lt;int&gt; dp(size+1,0);</div><div class="line">        dp[0]=dp[1]=1;</div><div class="line">        for(int i=1;i&lt;size;++i)&#123;</div><div class="line">            if(s[i]==&apos;0&apos;)</div><div class="line">                dp[i]=0;</div><div class="line">            if(s[i-1]==&apos;1&apos;||s[i-1]&lt;=&apos;2&apos;&amp;&amp;s[i]&lt;=&apos;6&apos;)</div><div class="line">                dp[i+1] = dp[i]+dp[i-1];</div><div class="line">            else</div><div class="line">                dp[i+1]=dp[i];</div><div class="line">        &#125;</div><div class="line">        return dp[size];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A message containing letters from A-Z is being encoded to numbers 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>90. Subsets II</title>
    <link href="http://www.mysry.com/2017/12/18/90-Subsets-II/"/>
    <id>http://www.mysry.com/2017/12/18/90-Subsets-II/</id>
    <published>2017-12-18T12:46:49.000Z</published>
    <updated>2017-12-18T12:52:43.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set). Note: The solution set must not contain duplicate subsets.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> This problem is following up <a href="http://www.mysry.com/2017/12/08/78-Subsets/">subsets</a>. But there is one more condition of duplicates. Also bfs + backtracking.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        List&lt;Integer&gt;tmp = new ArrayList&lt;Integer&gt;();</div><div class="line">        Arrays.sort(nums);</div><div class="line">        dfs(res,tmp,nums,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    public void dfs(List&lt;List&lt;Integer&gt;&gt; res,List&lt;Integer&gt; tmp,int[] nums, int pos)&#123;</div><div class="line">        res.add(new ArrayList&lt;&gt;(tmp));</div><div class="line">        for(int i = pos;i&lt;nums.length;++i)&#123;</div><div class="line">            if(i==pos||nums[i]!=nums[i-1])&#123;</div><div class="line">                tmp.add(nums[i]);</div><div class="line">                dfs(res,tmp,nums,i+1);</div><div class="line">                tmp.remove(tmp.size()-1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; subsetsWithDup(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        vector&lt;int&gt;tmp;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        dfs(res,tmp,nums,0);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    void dfs(vector&lt;vector&lt;int&gt;&gt;&amp;res,vector&lt;int&gt;&amp;tmp,vector&lt;int&gt;&amp; nums, int pos)&#123;</div><div class="line">        res.push_back(tmp);</div><div class="line">        for(int i=pos;i&lt;nums.size();++i)&#123;</div><div class="line">            if(i==pos||nums[i]!=nums[i-1])&#123;</div><div class="line">                tmp.push_back(nums[i]);</div><div class="line">                dfs(res,tmp,nums,i+1);</div><div class="line">                tmp.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a collection of integers that might contain duplicates, nums
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>89. Gray Code</title>
    <link href="http://www.mysry.com/2017/12/17/89-Gray-Code/"/>
    <id>http://www.mysry.com/2017/12/17/89-Gray-Code/</id>
    <published>2017-12-17T14:35:40.000Z</published>
    <updated>2017-12-17T14:41:00.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>The gray code is a binary numeral system where two successive values differ in only one bit. Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Different methods to generate Gray Code makes different solution, for instance the Gray Code can be generated by G(n) = B(n)^(B(N)/2) or mirror arrangement.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;Integer&gt; grayCode(int n) &#123;</div><div class="line">        List&lt;Integer&gt; res = new LinkedList&lt;&gt;();</div><div class="line">        for (int i=0;i&lt;1&lt;&lt;n;i++)</div><div class="line">            res.add(i^i&gt;&gt;1);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; grayCode(int n) &#123;</div><div class="line">        vector&lt;int&gt; res(1,0);</div><div class="line">        for(int i = 0; i &lt; n; i++)</div><div class="line">        &#123;</div><div class="line">            int high = 1&lt;&lt;i, len = res.size();</div><div class="line">            for(int j = len-1; j &gt;=0; j--)</div><div class="line">                res.push_back(high+res[j]);</div><div class="line">        &#125;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The gray code is a binary numeral system where two successive valu
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>87. Scramble String</title>
    <link href="http://www.mysry.com/2017/12/17/87-Scramble-String/"/>
    <id>http://www.mysry.com/2017/12/17/87-Scramble-String/</id>
    <published>2017-12-17T13:11:16.000Z</published>
    <updated>2017-12-17T13:21:02.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively. Below is one possible representation of s1 = “great”: great /<br>gr eat /   /<br>g r e at /<br>a t To scramble the string, we may choose any non-leaf node and swap its two children. For example, if we choose the node “gr” and swap its two children, it produces a scrambled string “rgeat”. rgeat /<br>rg eat /   /<br>r g e at /<br>a t We say that “rgeat” is a scrambled string of “great”. Similarly, if we continue to swap the children of nodes “eat” and “at”, it produces a scrambled string “rgtae”. rgtae /<br>rg tae /   /<br>r g ta e /<br>t a We say that “rgtae” is a scrambled string of “great”. Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> We should first preprocess the two string, such as judge if their length and the consist letter are equal. Then recursively judge their substring.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean isScramble(String s1, String s2) &#123;</div><div class="line">        if(s1.equals(s2)) return true;</div><div class="line">        if(s1.length()!=s2.length()||s1.length()==1)return false;</div><div class="line">        int len = s1.length(), num = len;</div><div class="line">        int[] letter=new int[26];</div><div class="line">        char[] sa1 = s1.toCharArray();</div><div class="line">        char[] sa2 = s2.toCharArray();</div><div class="line">        for(int i = 0;i&lt;len;i++)</div><div class="line">            letter[sa1[i]-&apos;a&apos;]++;</div><div class="line">        for(int i = 0;i&lt;len;i++)</div><div class="line">            if(letter[sa2[i]-&apos;a&apos;]!=0)&#123;</div><div class="line">                letter[sa2[i]-&apos;a&apos;]--;</div><div class="line">                num--;</div><div class="line">            &#125;</div><div class="line">        if(num != 0)</div><div class="line">            return false;</div><div class="line">        for(int i=1;i&lt;len;i++)&#123;</div><div class="line">            if(isScramble(s1.substring(0,i),s2.substring(0,i))&amp;&amp;isScramble(s1.substring(i),s2.substring(i)))</div><div class="line">                return true;</div><div class="line">            if(isScramble(s1.substring(0,i),s2.substring(len-i))&amp;&amp;isScramble(s1.substring(i),s2.substring(0,len-i)))</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool isScramble(string s1, string s2) &#123;</div><div class="line">        if(s1==s2) return true;</div><div class="line">        if(s1.size()!=s2.size()||s1.size()==1)return false;</div><div class="line">        int len = s1.size(), num = len;</div><div class="line">        vector&lt;int&gt; hash(26,0);</div><div class="line">        for(auto val:s1)hash[val-&apos;a&apos;]++;</div><div class="line">        for(auto val:s2)</div><div class="line">            if(hash[val-&apos;a&apos;])</div><div class="line">                hash[val-&apos;a&apos;]--,num--;</div><div class="line">        if(num != 0)</div><div class="line">            return false;</div><div class="line">        for(int i=1;i&lt;len;i++)&#123;</div><div class="line">            if(isScramble(s1.substr(0,i),s2.substr(0,i))&amp;&amp;isScramble(s1.substr(i),s2.substr(i)))</div><div class="line">                return true;</div><div class="line">            if(isScramble(s1.substr(0,i),s2.substr(len-i))&amp;&amp;isScramble(s1.substr(i),s2.substr(0,len-i)))</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a string s1, we may represent it as a binary tree by partiti
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Softmax</title>
    <link href="http://www.mysry.com/2017/12/17/Softmax/"/>
    <id>http://www.mysry.com/2017/12/17/Softmax/</id>
    <published>2017-12-17T06:53:47.000Z</published>
    <updated>2017-12-18T12:53:15.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="softmax-function">Softmax Function</h2><p>  在数学，尤其是概率论相关的专业，softmax函数（或称为归一化指数函数），是逻辑函数的一种推广。它能将一个含任意实数的k维的向量z“压缩到”另y一个k维实向量<span class="math inline">\(\sigma(z)\)</span>中使得每一个元素都在(0,1)之间，并且所有元素的和为1，softmax函数的形式通常由下面的式子给出：<span class="math display">\[\sigma(z)_j = \frac{e^{z_j}}{\sum_{k=1}^K e^{z_k}} , j =1,...,K.\]</span><br>   Softmax实际上就是有限项离散概率分布的梯度对数归一化，softmax在多项逻辑回归，多项线性判别分析，朴素贝叶斯分类器和人工神经网络等的多种基于概率的多分类方法中都有广泛的应用。<br>   Logitic Regression是用来解决二分类问题的，softmax解决的是多分类问题，因此也可以简单的理解为softmax是<a href="http://www.mysry.com/2017/11/18/Logistic-Regression/">logistic Regression</a>的推广。<br></p><h2 id="softmax-hypothesis-function-and-cost-function">Softmax Hypothesis Function and Cost Function</h2>  对于给定的输入x，我们利用假设函数针对每一个类别j估算出概率值<span class="math inline">\(P(y=j|x)\)</span>，也即估计x的每一个分类结果出现的概率，假设函数将要输出一个k维的向量（向量的元素和为1）来表示这k个估计的概率值。假设函数形式如下：<span class="math display">\[h_{\theta}(x^{(i)})=\begin{bmatrix}p(y^{(i)}=1|x^{(i)};\theta)\\p(y^{(i)}=2|x^{(i)};\theta)\\\vdots \\p(y^{(i)}=k|x^{(i)};\theta)\end{bmatrix}=\frac{1}{\sum_{j=1}^k e^{\theta_j^T x^{(i)}}}\begin{bmatrix}e^{\theta_1^T x^{(i)}}\\ e^{\theta_2^T x^{(i)}}\\ \vdots \\ e^{\theta_k^T x^{(i)}} \end{bmatrix}\]</span>其中<span class="math inline">\(\theta_1,\theta_2,...,\theta_k \in R^{n+1}\)</span>是模型的参数，<span class="math inline">\(\sum \frac{1}{\sum_{j=1}^k e^{\theta_j^T x^{(i)}}}=1\)</span><br>   假定<span class="math inline">\(I(·)\)</span>为真值函数，即<span class="math inline">\(I(true)=1\)</span> and <span class="math inline">\(I(false)=0\)</span>，则我们的代价函数为<span class="math display">\[J(\theta)=-\frac{1}{m}\begin{bmatrix}\sum_{i=1}^m \sum_{j=1}^k I(y^{(i)}=j)\log\frac{e^{\theta_j^T x^{(i)}}}{\sum_{l=1}^k e^{\theta_l^T x^{(i)}}}\end{bmatrix}\]</span>改公式是Logistic Regression的推广，所以我们可以将logistic regression的回归代价函数改为:<span class="math display">\[\begin{align}J(\theta)&amp;=-\frac{1}{m}\begin{bmatrix}\sum_{i=1}^m (1-y^{(i)})\log(1-h_\theta(x^{(i)}))+y^{(i)}\log h_\theta(x^{(i)})\end{bmatrix}\\&amp;=-\frac{1}{m}\begin{bmatrix}\sum_{i=1}^m \sum_{j=0}^1 I(y^{(i)=j})\log p(y^{(i)}=j|x^(i);\theta)\end{bmatrix}\end{align}\]</span><p>至于上述代价函数的优化方法参考<a href="http://www.mysry.com/2017/11/11/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B1%82%E8%A7%A3%E6%97%A0%E7%BA%A6%E6%9D%9F%E6%9C%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/">常见的迭代优化算法</a><br></p><h2 id="softmax-regression-model-parameterization">Softmax Regression Model Parameterization</h2>  Softmax回归有一个不寻常的特点：它有一个“冗余”的参数集。为了便于阐述这一特点，假设我们从参数向量<span class="math inline">\(\theta_j\)</span>中减去向量<span class="math inline">\(\varphi\)</span>，此时<span class="math inline">\(\theta_j=\theta_j-\varphi(j=1,...,k)\)</span>,那么假设函数变为:<span class="math display">\[\begin{align}p(y^{(i)} = j | x^{(i)}; \theta)&amp;= \frac{e^{(\theta_j-\psi)^T x^{(i)}}}{\sum_{l=1}^k e^{ (\theta_l-\psi)^T x^{(i)}}}  \\&amp;= \frac{e^{\theta_j^T x^{(i)}} e^{-\psi^Tx^{(i)}}}{\sum_{l=1}^k e^{\theta_l^T x^{(i)}} e^{-\psi^Tx^{(i)}}} \\&amp;= \frac{e^{\theta_j^T x^{(i)}}}{\sum_{l=1}^k e^{ \theta_l^T x^{(i)}}}.\end{align}\]</span><p>从上面的公式可以看出来，在<span class="math inline">\(\theta_j\)</span>中减去<span class="math inline">\(\varphi\)</span>对假设函数的预测结果完全没有影响，这表明，Softmax 模型被过度参数化了。对于任意一个用于拟合数据的假设函数，可以求出多组参数值，这些参数得到的是完全相同的假设函数<span class="math inline">\(h_\theta\)</span>,因此使J(θ)最小化的解不是唯一的。而Hessian矩阵是奇异的/不可逆的，这会直接导致Softmax的牛顿法实现版本出现数值计算的问题。此时，我们需要对代价函数作出改动：加入权重衰减。<br></p><h2 id="weight-decay">Weight Decay</h2><p>  通过加入权重衰减项<span class="math inline">\(\frac{\lambda}{2}\sum_{i=1}^k \sum_{j=0}^n \theta_{ij}^2\)</span>来修改代价函数，改衰减项会惩罚过大的参数，那么加入权重衰减项的代价函数为：<span class="math display">\[J(\theta)=-\frac{1}{m}\begin{bmatrix}\sum_{i=1}^m \sum_{j=1}^k I(y^{(i)}=j)\log\frac{e^{\theta_j^T x^{(i)}}}{\sum_{l=1}^k e^{\theta_l^T x^{(i)}}}\end{bmatrix}+\frac{\lambda}{2}\sum_{i=1}^k \sum_{j=0}^n \theta_{ij}^2,\lambda&gt;0\]</span>在加入该权重衰减项后，代价函数就变为严格的凸函数，可以保证得到唯一解，此时的Hessian矩阵变成了可逆矩阵，并且由于<span class="math inline">\(J(\theta)\)</span>是凸函数，诸如梯度下降法和L-BFGS等可以保证收敛到全局最优解。<br></p><h2 id="softmax-regression-and-logistic-regression">Softmax Regression and Logistic Regression</h2>  当类别数为2时，softmax回归退化为logistic回归，具体而言，当k=2时，softmax的假设函数为：<span class="math display">\[\begin{align}h_\theta(x) =\frac{1}{ e^{\theta_1^Tx}  + e^{ \theta_2^T x^{(i)}}}\begin{bmatrix}e^{ \theta_1^T x } \\e^{ \theta_2^T x }\end{bmatrix}\end{align}\]</span>利用softmax回归参数冗余的特点，令<span class="math inline">\(\varphi=\theta_1\)</span>,并从两个参数向量中减去<span class="math inline">\(\theta_1\)</span>，那么：<span class="math display">\[\begin{align}h(x) &amp;=\frac{1}{ e^{\vec{0}^Tx}  + e^{ (\theta_2-\theta_1)^T x^{(i)} } }\begin{bmatrix}e^{ \vec{0}^T x } \\e^{ (\theta_2-\theta_1)^T x }\end{bmatrix} \\&amp;=\begin{bmatrix}\frac{1}{ 1 + e^{ (\theta_2-\theta_1)^T x^{(i)} } } \\ \frac{e^{ (\theta_2-\theta_1)^T x }}{ 1 + e^{ (\theta_2-\theta_1)^T x^{(i)} } } \end{bmatrix} \\&amp;= \begin{bmatrix} \frac{1}{ 1  + e^{ (\theta_2-\theta_1)^T x^{(i)} } } \\ 1 - \frac{1}{ 1  + e^{ (\theta_2-\theta_1)^T x^{(i)} }}\\\end{bmatrix} \end{align}\]</span><p>因此，用<span class="math inline">\(\theta&#39;\)</span>来表示<span class="math inline">\(\theta_2-\theta_1\)</span>，softmax回归器预测其中一个类别的概率为<span class="math inline">\(\frac{1}{1+e^{(\theta&#39;)^T x^{(i)}}}\)</span>,而另一个类别的概率为<span class="math inline">\(1-\frac{1}{1+e^{(\theta&#39;)^T x^{(i)}}}\)</span>,与logistic回归一致。<br></p><h2 id="softmax-model-and-k-binary-classifier">Softmax Model and k Binary Classifier</h2><p>  一般而言，互斥的类别选择softmax，否则依据logistic回归建立k个二元分类器。<br></p><center color="red">To be continued…</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;softmax-function&quot;&gt;Softmax Function&lt;/h2&gt;
&lt;p&gt;  在数学，尤其是概率论相关的专业，softmax函数（或称为归一化指数函数），是逻辑函数的一种推广。它能将一个含任意实数的k维的向量z“压缩到”另y一个k维实向量&lt;span c
      
    
    </summary>
    
    
      <category term="Machine learning" scheme="http://www.mysry.com/tags/Machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>86. Partition List</title>
    <link href="http://www.mysry.com/2017/12/15/86-Partition-List/"/>
    <id>http://www.mysry.com/2017/12/15/86-Partition-List/</id>
    <published>2017-12-15T14:10:59.000Z</published>
    <updated>2017-12-15T14:16:42.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Keep two List to store the nodes which is bigger than x and smaller than x respectively. Add curr2 to the tail of curr1.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public ListNode partition(ListNode head, int x) &#123;</div><div class="line">        ListNode dummy1 = new ListNode(0);</div><div class="line">        ListNode dummy2 = new ListNode(0);</div><div class="line">        ListNode curr1 = dummy,curr2 = dummy2;</div><div class="line">        while(head != null)&#123;</div><div class="line">            if(head.val&lt;x)&#123;</div><div class="line">                curr1.next = head;</div><div class="line">                curr1 = curr1.next;</div><div class="line">            &#125;else&#123;</div><div class="line">                curr2.next = head;</div><div class="line">                curr2 = curr2.next;</div><div class="line">            &#125;</div><div class="line">            head = head.next;</div><div class="line">        &#125;</div><div class="line">        curr2.next = null;</div><div class="line">        curr1.next = dummy2.next;</div><div class="line">        return dummy1.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    ListNode* partition(ListNode* head, int x) &#123;</div><div class="line">        ListNode node1(0), node2(0);</div><div class="line">        ListNode *p1 = &amp;node1,*p2 = &amp;node2;</div><div class="line">        while(head)&#123;</div><div class="line">            if(head-&gt;val&lt;x)</div><div class="line">                p1 = p1-&gt;next = head;</div><div class="line">            else</div><div class="line">                p2 = p2-&gt;next = head;</div><div class="line">            head = head-&gt;next;</div><div class="line">        &#125;</div><div class="line">        p2-&gt;next = NULL;</div><div class="line">        p1-&gt;next = node2.next;</div><div class="line">        return node1.next;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a linked list and a value x, partition it such that all node
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>85. Maximal Rectangle </title>
    <link href="http://www.mysry.com/2017/12/13/85-Maximal-Rectangle/"/>
    <id>http://www.mysry.com/2017/12/13/85-Maximal-Rectangle/</id>
    <published>2017-12-13T14:31:53.000Z</published>
    <updated>2017-12-13T14:39:41.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Based on previous problem, set every row’s reachable height as the input height. Input the heights array and update the maxArea gobally.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int maximalRectangle(char[][] matrix) &#123;</div><div class="line">         if (matrix==null||matrix.length==0||matrix[0].length==0)</div><div class="line">            return 0;</div><div class="line">        int cLen = matrix[0].length;</div><div class="line">        int rLen = matrix.length;</div><div class="line">        int[] h = new int[cLen+1];</div><div class="line">        h[cLen]=0;</div><div class="line">        int max = 0;</div><div class="line">        for (int row=0;row&lt;rLen;row++) &#123;</div><div class="line">            Stack&lt;Integer&gt; s = new Stack&lt;Integer&gt;();</div><div class="line">            for (int i=0;i&lt;cLen+1;i++) &#123;</div><div class="line">                if (i&lt;cLen)</div><div class="line">                    if(matrix[row][i]==&apos;1&apos;)</div><div class="line">                        h[i]+=1;</div><div class="line">                    else h[i]=0;</div><div class="line"></div><div class="line">                if (s.isEmpty()||h[s.peek()]&lt;=h[i])</div><div class="line">                    s.push(i);</div><div class="line">                else &#123;</div><div class="line">                    while(!s.isEmpty()&amp;&amp;h[i]&lt;h[s.peek()])&#123;</div><div class="line">                        int top = s.pop();</div><div class="line">                        int area = h[top]*(s.isEmpty()?i:(i-s.peek()-1));</div><div class="line">                        if (area&gt;max)</div><div class="line">                            max = area;</div><div class="line">                    &#125;</div><div class="line">                    s.push(i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) &#123;</div><div class="line">        int res = 0;</div><div class="line">        vector&lt;int&gt; height;</div><div class="line">        for (int i = 0; i &lt; matrix.size(); ++i) &#123;</div><div class="line">            height.resize(matrix[i].size());</div><div class="line">            for (int j = 0; j &lt; matrix[i].size(); ++j) &#123;</div><div class="line">                height[j] = matrix[i][j] == &apos;0&apos; ? 0 : (1 + height[j]);</div><div class="line">            &#125;</div><div class="line">            res = max(res, largestRectangleArea(height));</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    int largestRectangleArea(vector&lt;int&gt; &amp;height) &#123;</div><div class="line">        int res = 0;</div><div class="line">        stack&lt;int&gt; s;</div><div class="line">        height.push_back(0);</div><div class="line">        for (int i = 0; i &lt; height.size(); ++i) &#123;</div><div class="line">            if (s.empty() || height[s.top()] &lt;= height[i]) s.push(i);</div><div class="line">            else &#123;</div><div class="line">                int tmp = s.top();</div><div class="line">                s.pop();</div><div class="line">                res = max(res, height[tmp] * (s.empty() ? i : (i - s.top() - 1)));</div><div class="line">                --i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a 2D binary matrix filled with 0’s and 1’s, find the largest
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>84. Largest Rectangle in Histogram</title>
    <link href="http://www.mysry.com/2017/12/13/84-Largest-Rectangle-in-Histogram/"/>
    <id>http://www.mysry.com/2017/12/13/84-Largest-Rectangle-in-Histogram/</id>
    <published>2017-12-13T13:00:25.000Z</published>
    <updated>2017-12-13T13:16:16.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Travel through all the heights, find the area of height[i], and use a stack to store the unreachable boundary of height[i]’s rectangular. For the reachable boundary heights[i], caculate the area, update the max area and push it(delete it).</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int largestRectangleArea(int[] heights) &#123;</div><div class="line">        if(heights==null||heights.length==0)</div><div class="line">            return 0;</div><div class="line">        Stack&lt;Integer&gt; st = new Stack&lt;Integer&gt;();</div><div class="line">        int maxArea = 0;</div><div class="line">        for(int i=0;i&lt;=heights.length;i++)&#123;</div><div class="line">            int curt = (i == heights.length)?-1:heights[i];</div><div class="line">            while(!st.isEmpty()&amp;&amp;curt &lt;= heights[st.peek()])&#123;</div><div class="line">                int h = heights[st.pop()];</div><div class="line">                int w = st.isEmpty()?i:i-(st.peek()+1);</div><div class="line">                maxArea = Math.max(maxArea,h*w);</div><div class="line">            &#125;</div><div class="line">            st.push(i);</div><div class="line">        &#125;</div><div class="line">        return maxArea;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int largestRectangleArea(vector&lt;int&gt;&amp; heights) &#123;</div><div class="line">        int ret = 0;</div><div class="line">        heights.push_back(0);</div><div class="line">        vector&lt;int&gt; index;</div><div class="line">        for (int i=0;i&lt;heights.size();i++)&#123;</div><div class="line">            while(index.size()&gt;0&amp;&amp; heights[index.back()]&gt;=heights[i])&#123;</div><div class="line">                int h = heights[index.back()];</div><div class="line">                index.pop_back();</div><div class="line">                int idx = index.size()&gt;0?index.back():-1;</div><div class="line">                if(h*(i-idx-1)&gt;ret)</div><div class="line">                    ret = h*(i-idx-1);</div><div class="line">            &#125;</div><div class="line">            index.push_back(i);</div><div class="line">        &#125;</div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given n non-negative integers representing the histogram’s bar hei
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>81. Search in Rotated Sorted Array II </title>
    <link href="http://www.mysry.com/2017/12/11/81-Search-in-Rotated-Sorted-Array-II/"/>
    <id>http://www.mysry.com/2017/12/11/81-Search-in-Rotated-Sorted-Array-II/</id>
    <published>2017-12-11T14:12:26.000Z</published>
    <updated>2017-12-11T14:20:27.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2). Write a function to determine if a given target is in the array. The array may contain duplicates.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Binary search!</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean search(int[] nums, int target) &#123;</div><div class="line">        int left =0, right = nums.length,mid;</div><div class="line">        while(left&lt;=right)&#123;</div><div class="line">            mid = (left+right)/2;</div><div class="line">            if(nums[mid]==target)</div><div class="line">                return true;</div><div class="line">            if(nums[mid]==nums[left]&amp;&amp;nums[left]==nums[mid])&#123;</div><div class="line">                ++left;</div><div class="line">                --right;</div><div class="line">            &#125;else if(nums[left]&lt;=nums[mid])&#123;</div><div class="line">                if(nums[mid]&gt;target&amp;&amp;nums[left]&lt;=target)</div><div class="line">                    right=mid-1;</div><div class="line">                else</div><div class="line">                    left=mid+1;</div><div class="line">            &#125;else&#123;</div><div class="line">                if(nums[mid]&lt;target&amp;&amp;nums[right]&gt;=target)</div><div class="line">                    left = mid+1;</div><div class="line">                else</div><div class="line">                    right = mid-1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool search(vector&lt;int&gt;&amp; nums, int target) &#123;</div><div class="line">        int left = 0,right = nums.size()-1,mid;</div><div class="line">        while(left&lt;=right)</div><div class="line">        &#123;</div><div class="line">            mid = (left+right)&gt;&gt;1;</div><div class="line">            if(nums[mid]==target)</div><div class="line">                return true;</div><div class="line">            if((nums[left]==nums[mid])&amp;&amp;(nums[right]==nums[mid]))</div><div class="line">               &#123;</div><div class="line">                ++left;</div><div class="line">                --right;</div><div class="line">            &#125;</div><div class="line">            else if(nums[left]&lt;=nums[mid])</div><div class="line">            &#123;</div><div class="line">                if((nums[left]&lt;=target)&amp;&amp; (nums[mid]&gt;target))</div><div class="line">                    right = mid-1;</div><div class="line">                else</div><div class="line">                    left = mid+1;</div><div class="line">            &#125;</div><div class="line">            else</div><div class="line">            &#123;</div><div class="line">                if((nums[mid]&lt;target)&amp;&amp;(nums[right]&gt;=target))</div><div class="line">                    left = mid+1;</div><div class="line">                else</div><div class="line">                    right = mid-1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivo
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>79. Word Search </title>
    <link href="http://www.mysry.com/2017/12/10/79-Word-Search/"/>
    <id>http://www.mysry.com/2017/12/10/79-Word-Search/</id>
    <published>2017-12-10T02:23:14.000Z</published>
    <updated>2017-12-10T02:26:50.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> bfs+dfs+backtracking.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean exist(char[][] board, String word) &#123;</div><div class="line">        char[] w= word.toCharArray();</div><div class="line">        for(int i=0;i&lt;board.length;i++)&#123;</div><div class="line">            for(int j=0;j&lt;board[0].length;j++)&#123;</div><div class="line">                if(isfound(board,w,i,j,0))</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    public boolean isfound(char[][] board,char[] w,int i,int j,int m)&#123;</div><div class="line">        if(m==w.length) return true;</div><div class="line">        if(i&lt;0||j&lt;0||i==board.length||j==board[i].length)</div><div class="line">            return false;</div><div class="line">        if(board[i][j]!=w[m]) return false;</div><div class="line">        board[i][j]^=256;</div><div class="line">        if(isfound(board,w,i-1,j,m+1)||isfound(board,w,i+1,j,m+1)||isfound(board,w,i,j-1,m+1)||isfound(board,w,i,j+1,m+1))</div><div class="line">            return true;</div><div class="line">        board[i][j]^=256;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) &#123;</div><div class="line">        m = board.size();</div><div class="line">        n = board[0].size();</div><div class="line">        for(int i=0;i&lt;m;i++)</div><div class="line">            for(int j=0;j&lt;n;j++)&#123;</div><div class="line">                if(isfound(board,word.c_str(),i,j))</div><div class="line">                    return true;</div><div class="line">            &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    private:</div><div class="line">        int m;</div><div class="line">        int n;</div><div class="line">        bool isfound(vector&lt;vector&lt;char&gt;&gt;&amp; board ,const char* w, int i,int j)</div><div class="line">        &#123;</div><div class="line">            if(i&lt;0||j&lt;0||i&gt;=m||j&gt;=n||board[i][j]==&apos;\0&apos;|| *w != board[i][j])</div><div class="line">                return false;</div><div class="line">            if(*(w+1)==&apos;\0&apos;)</div><div class="line">                return true;</div><div class="line">            char t = board[i][j];</div><div class="line">            board[i][j]=&apos;\0&apos;;</div><div class="line">            if(isfound(board,w+1,i-1,j)||isfound(board,w+1,i+1,j)||isfound(board,w+1,i,j-1)||isfound(board,w+1,i,j+1))</div><div class="line">                return true;</div><div class="line">            board[i][j]=t;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a 2D board and a word, find if the word exists in the grid. 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>80. Remove Duplicates from Sorted Array II </title>
    <link href="http://www.mysry.com/2017/12/10/80-Remove-Duplicates-from-Sorted-Array-II/"/>
    <id>http://www.mysry.com/2017/12/10/80-Remove-Duplicates-from-Sorted-Array-II/</id>
    <published>2017-12-10T02:18:47.000Z</published>
    <updated>2017-12-10T02:22:19.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Follow up for “Remove Duplicates”: What if duplicates are allowed at most twice?</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Just go through the numbers and include those in the result that haven’t been included twice already.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int removeDuplicates(int[] nums) &#123;</div><div class="line">        int i=0;</div><div class="line">        for(int n:nums)&#123;</div><div class="line">            if(i&lt;2||n&gt;nums[i-2])</div><div class="line">                nums[i++]=n;</div><div class="line">        &#125;</div><div class="line">        return i;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int i=0;</div><div class="line">        for(int n:nums)&#123;</div><div class="line">            if(i&lt;2||n&gt;nums[i-2])</div><div class="line">                nums[i++]=n;</div><div class="line">        &#125;</div><div class="line">        return i;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow up for “Remove Duplicates”: What if duplicates are allowed 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
