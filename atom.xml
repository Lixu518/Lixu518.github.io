<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mysry</title>
  
  <subtitle>Life is short, learn more!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mysry.com/"/>
  <updated>2017-12-05T13:38:35.533Z</updated>
  <id>http://www.mysry.com/</id>
  
  <author>
    <name>Mysry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>74. Search a 2D Matrix </title>
    <link href="http://www.mysry.com/2017/12/05/74-Search-a-2D-Matrix/"/>
    <id>http://www.mysry.com/2017/12/05/74-Search-a-2D-Matrix/</id>
    <published>2017-12-05T13:33:54.000Z</published>
    <updated>2017-12-05T13:38:35.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Search a sorted matrix.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Just treat the sorted matrix as a sorted array and use the binary search!</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean searchMatrix(int[][] matrix, int target) &#123;</div><div class="line">        if(matrix.length==0||matrix[0].length==0)</div><div class="line">            return false;</div><div class="line">        int m = matrix.length, n = matrix[0].length;</div><div class="line">        int l=0, r = m*n-1;</div><div class="line">        while(l!=r)&#123;</div><div class="line">            int mid = (l+r-1)/2;</div><div class="line">            if (matrix[mid/n][mid%n]&lt;target)</div><div class="line">                l= mid +1;</div><div class="line">            else </div><div class="line">                r = mid;</div><div class="line">        &#125;</div><div class="line">        return matrix[r/n][r%n] == target;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) &#123;</div><div class="line">        int m = matrix.size();</div><div class="line">        if(m==0) return false;</div><div class="line">        int n = matrix[0].size();</div><div class="line">        if(n==0) return false;</div><div class="line">        int l = 0, r = m*n-1;</div><div class="line">        while(l!=r)&#123;</div><div class="line">            int mid = (l+r-1)&gt;&gt;1;</div><div class="line">            if(matrix[mid/n][mid%n]&lt;target)</div><div class="line">                l=mid+1;</div><div class="line">            else</div><div class="line">                r = mid;</div><div class="line">        &#125;</div><div class="line">        return matrix[r/n][r%n] == target;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Search a sorted matrix.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;idea&quot;&gt;&lt;font colo
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>73. Set Matrix Zeroes</title>
    <link href="http://www.mysry.com/2017/12/04/73-Set-Matrix-Zeroes/"/>
    <id>http://www.mysry.com/2017/12/04/73-Set-Matrix-Zeroes/</id>
    <published>2017-12-04T14:01:32.000Z</published>
    <updated>2017-12-04T14:06:14.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> It’s better to set it in O(1) space. So we need to store the loaction of o element.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public void setZeroes(int[][] matrix) &#123;</div><div class="line">        if(matrix==null||matrix.length==0) return; </div><div class="line">        int row = matrix.length;</div><div class="line">        int col = matrix[0].length;</div><div class="line">        int[] recordrow =new int[row];</div><div class="line">        int[] recordcol = new int[col];</div><div class="line">        for(int i=0;i&lt;row;i++)&#123;</div><div class="line">            for(int j=0;j&lt;col;j++)&#123;</div><div class="line">                if(matrix[i][j]==0)&#123;</div><div class="line">                    recordrow[i]=1;</div><div class="line">                    recordcol[j]=1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i=0;i&lt;row;i++)&#123;</div><div class="line">            if(recordrow[i]==1)&#123;</div><div class="line">                for (int j=0;j&lt;col;j++)</div><div class="line">                    matrix[i][j]=0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int j=0;j&lt;col;j++)&#123;</div><div class="line">            if(recordcol[j]==1)&#123;</div><div class="line">                for(int i=0;i&lt;row;i++)</div><div class="line">                    matrix[i][j]=0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</div><div class="line">        int row = matrix.size();</div><div class="line">        int col = matrix[0].size();</div><div class="line">        vector&lt;int&gt; recordrow(row,0);</div><div class="line">        vector&lt;int&gt; recordcol(col,0);</div><div class="line">        for (int i=0;i&lt;row;i++)&#123;</div><div class="line">            for (int j=0;j&lt;col;j++)&#123;</div><div class="line">                if(matrix[i][j]==0)&#123;</div><div class="line">                    recordrow[i]=1;</div><div class="line">                    recordcol[j]=1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i=0;i&lt;row;i++)&#123;</div><div class="line">            if(recordrow[i]==1)&#123;</div><div class="line">                for(int j=0;j&lt;col;j++)</div><div class="line">                    matrix[i][j]=0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int j=0;j&lt;col;j++)&#123;</div><div class="line">            if(recordcol[j]==1)&#123;</div><div class="line">                for (int i=0;i&lt;row;i++)</div><div class="line">                    matrix[i][j]=0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a m x n matrix, if an element is 0, set its entire row and c
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>72. Edit Distance</title>
    <link href="http://www.mysry.com/2017/12/04/72-Edit-Distance/"/>
    <id>http://www.mysry.com/2017/12/04/72-Edit-Distance/</id>
    <published>2017-12-04T13:12:00.000Z</published>
    <updated>2017-12-04T14:01:42.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.) You have the following 3 operations permitted on a word: a) Insert a character b) Delete a character c) Replace a character</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Use the DP solution, if word1[i]==word2[j], than dp[i][j] doesn’t change, otherwise we’d like to choose the minDistance way.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package EditDistance;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">public int minDistance(String word1, String word2) &#123;</div><div class="line">int m = word1.length(), n = word2.length();</div><div class="line">int[][] cost = new int[m + 1][n + 1];</div><div class="line">for (int i = 0; i &lt;= m; i++)</div><div class="line">cost[i][0] = i;</div><div class="line">for (int i = 0; i &lt;= n; i++)</div><div class="line">cost[0][i] = i;</div><div class="line">for (int i = 0; i &lt; m; i++) &#123;</div><div class="line">for (int j = 0; j &lt; n; j++) &#123;</div><div class="line">if (word1.charAt(i) == word2.charAt(j))</div><div class="line">cost[i + 1][j + 1] = cost[i][j];</div><div class="line">else &#123;</div><div class="line">int a = cost[i][j];</div><div class="line">int b = cost[i][j + 1];</div><div class="line">int c = cost[i + 1][j];</div><div class="line">cost[i + 1][j + 1] = a &lt; b ? (a &lt; c ? a : c) : (b &lt; c ? b : c);</div><div class="line">cost[i + 1][j + 1]++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return cost[m][n];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package EditDistance;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">public int minDistance(String word1, String word2) &#123;</div><div class="line">int m = word1.length(), n = word2.length();</div><div class="line">int[][] cost = new int[m + 1][n + 1];</div><div class="line">for (int i = 0; i &lt;= m; i++)</div><div class="line">cost[i][0] = i;</div><div class="line">for (int i = 0; i &lt;= n; i++)</div><div class="line">cost[0][i] = i;</div><div class="line">for (int i = 0; i &lt; m; i++) &#123;</div><div class="line">for (int j = 0; j &lt; n; j++) &#123;</div><div class="line">if (word1.charAt(i) == word2.charAt(j))</div><div class="line">cost[i + 1][j + 1] = cost[i][j];</div><div class="line">else &#123;</div><div class="line">int a = cost[i][j];</div><div class="line">int b = cost[i][j + 1];</div><div class="line">int c = cost[i + 1][j];</div><div class="line">cost[i + 1][j + 1] = a &lt; b ? (a &lt; c ? a : c) : (b &lt; c ? b : c);</div><div class="line">cost[i + 1][j + 1]++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return cost[m][n];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two words word1 and word2, find the minimum number of steps 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>65. Valid Number</title>
    <link href="http://www.mysry.com/2017/12/04/65-Valid-Number/"/>
    <id>http://www.mysry.com/2017/12/04/65-Valid-Number/</id>
    <published>2017-12-04T12:11:41.000Z</published>
    <updated>2017-12-04T12:15:40.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Validate if a given string is numeric.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Verification as the rule and don’t miss any possiable situation.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package ValidNumber;</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">public boolean isNumber(String s) &#123;</div><div class="line">s = s.trim();</div><div class="line">boolean pointSeen = false;</div><div class="line">boolean eSeen = false;</div><div class="line">boolean numberSeen = false;</div><div class="line">boolean numberAfterE = true;</div><div class="line">for (int i = 0; i &lt; s.length(); i++) &#123;</div><div class="line">if (&apos;0&apos; &lt;= s.charAt(i) &amp;&amp; s.charAt(i) &lt;= &apos;9&apos;) &#123;</div><div class="line">numberSeen = true;</div><div class="line">numberAfterE = true;</div><div class="line">&#125; else if (s.charAt(i) == &apos;.&apos;) &#123;</div><div class="line">if (eSeen || pointSeen) &#123;</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">pointSeen = true;</div><div class="line">&#125; else if (s.charAt(i) == &apos;e&apos;) &#123;</div><div class="line">if (eSeen || !numberSeen) &#123;</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">numberAfterE = false;</div><div class="line">eSeen = true;</div><div class="line">&#125; else if (s.charAt(i) == &apos;-&apos; || s.charAt(i) == &apos;+&apos;) &#123;</div><div class="line">if (i != 0 &amp;&amp; s.charAt(i - 1) != &apos;e&apos;) &#123;</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125; else &#123;</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return numberSeen &amp;&amp; numberAfterE;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    bool isNumber(string s) &#123;</div><div class="line">        int n = s.size();</div><div class="line">        if(n==0) return false;</div><div class="line">        int i=0,count_point = 0,count_num = 0;</div><div class="line">        while(s[i]==&apos; &apos;) i++;</div><div class="line">        if(s[i]==&apos;-&apos;||s[i]==&apos;+&apos;)i++;</div><div class="line">        while(isdigit(s[i])||s[i]==&apos;.&apos;)</div><div class="line">            s[i++]==&apos;.&apos;?count_point++:count_num++;</div><div class="line">        if(count_point&gt;1||count_num&lt;1)</div><div class="line">            return false;</div><div class="line">        if(s[i]==&apos;e&apos;)&#123;</div><div class="line">            i++;</div><div class="line">            count_point=0,count_num=0;</div><div class="line">            if(s[i]==&apos;-&apos;||s[i]==&apos;+&apos;)</div><div class="line">                i++;</div><div class="line">            while(isdigit(s[i])||s[i]==&apos;.&apos;)</div><div class="line">                s[i++]==&apos;.&apos;?count_point++:count_num++;</div><div class="line">            if(count_point&gt;0||count_num&lt;1)</div><div class="line">                return false;</div><div class="line">        &#125;</div><div class="line">        while(s[i]==&apos; &apos;)</div><div class="line">            i++;</div><div class="line">        return i==n;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Validate if a given string is numeric.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;i
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>71. Simplify Path</title>
    <link href="http://www.mysry.com/2017/12/03/71-Simplify-Path/"/>
    <id>http://www.mysry.com/2017/12/03/71-Simplify-Path/</id>
    <published>2017-12-03T14:11:35.000Z</published>
    <updated>2017-12-03T14:18:39.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an absolute path for a file (Unix-style), simplify it. For example, path = “/home/”, =&gt; “/home” path = “/a/./b/../../c/”, =&gt; “/c”</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> We split the path by “/”, and then judge the every section of the path. If the dir is “.”, just delete it and if the dir is “..”, delete it and its previous dir, other dirs will be stored int the stack.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public String simplifyPath(String path) &#123;</div><div class="line">        Deque&lt;String&gt; stack = new LinkedList&lt;&gt;();</div><div class="line">        Set&lt;String&gt; skip = new HashSet&lt;&gt;(Arrays.asList(&quot;..&quot;,&quot;.&quot;,&quot;&quot;));</div><div class="line">        for (String dir : path.split(&quot;/&quot;)) &#123;</div><div class="line">            if (dir.equals(&quot;..&quot;) &amp;&amp; !stack.isEmpty()) </div><div class="line">                stack.pop();</div><div class="line">            else if (!skip.contains(dir)) </div><div class="line">                stack.push(dir);</div><div class="line">        &#125;</div><div class="line">        String res = &quot;&quot;;</div><div class="line">        for (String dir : stack) res = &quot;/&quot; + dir + res;</div><div class="line">        return res.isEmpty() ? &quot;/&quot; : res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    string simplifyPath(string path) &#123;</div><div class="line">        string res, tmp;</div><div class="line">    vector&lt;string&gt; stk;</div><div class="line">    stringstream ss(path);</div><div class="line">    while(getline(ss,tmp,&apos;/&apos;)) &#123;</div><div class="line">        if (tmp == &quot;&quot; or tmp == &quot;.&quot;) continue;</div><div class="line">        if (tmp == &quot;..&quot; and !stk.empty()) stk.pop_back();</div><div class="line">        else if (tmp != &quot;..&quot;) stk.push_back(tmp);</div><div class="line">    &#125;</div><div class="line">    for(auto str : stk) res += &quot;/&quot;+str;</div><div class="line">    return res.empty() ? &quot;/&quot; : res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an absolute path for a file (Unix-style), simplify it. For e
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>68. Text Justification</title>
    <link href="http://www.mysry.com/2017/12/02/68-Text-Justification/"/>
    <id>http://www.mysry.com/2017/12/02/68-Text-Justification/</id>
    <published>2017-12-02T12:10:40.000Z</published>
    <updated>2017-12-03T02:39:38.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified. You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ‘’ when necessary so that each line has exactly L characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left justified and no extra space is inserted between words.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Travel through the String array to find how many words it is needed to suit the maxWidth and for the most situation the words length can’t be maxWidth, we need add extra space, such and to keep the space is generally similar, the last line is special because of we’d like to keep the extra space all set to be right.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;String&gt; fullJustify(String[] words, int maxWidth) &#123;</div><div class="line">        List&lt;String&gt; res = new ArrayList&lt;&gt;();</div><div class="line">        int cur = 0;</div><div class="line">        while(cur&lt;words.length)&#123;</div><div class="line">            int last = cur +1;</div><div class="line">            int cnt = words[cur].length();</div><div class="line">            while(last&lt;words.length)&#123;</div><div class="line">                if(words[last].length()+cnt+1&gt;maxWidth)</div><div class="line">                    break;</div><div class="line">                cnt += words[last].length()+1;</div><div class="line">                last++;</div><div class="line">            &#125;</div><div class="line">            int gap = last -cur -1;</div><div class="line">            StringBuilder sb = new StringBuilder();</div><div class="line">            if(last == words.length||gap==0)&#123;</div><div class="line">                for (int i=cur;i&lt;last;i++)</div><div class="line">                    sb.append(words[i]+&quot; &quot;);</div><div class="line">                sb.deleteCharAt(sb.length()-1);</div><div class="line">                for (int i = sb.length();i&lt;maxWidth;i++)</div><div class="line">                    sb.append(&quot; &quot;);</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                int spaces = (maxWidth - cnt) / gap;</div><div class="line">                int rem = (maxWidth - cnt) % gap;</div><div class="line">                for ( int i = cur; i&lt;last;i++)&#123;</div><div class="line">                    sb.append(words[i]);</div><div class="line">                    if(i&lt;last-1)&#123;</div><div class="line">                        for (int j=0;j&lt;=(spaces + (i-cur&lt;rem?1:0));j++)</div><div class="line">                            sb.append(&quot; &quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            res.add(sb.toString());</div><div class="line">            cur = last;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="c-code"><font color="gold">C++ Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;string&gt; fullJustify(vector&lt;string&gt;&amp; words, int maxWidth)</div><div class="line">    &#123;</div><div class="line">        vector&lt;string&gt; res ;</div><div class="line">        for (int i=0,k,l;i&lt;words.size();i+=k)</div><div class="line">        &#123;</div><div class="line">            for (k=l=0;i+k&lt;words.size() and l+words[i+k].size()&lt;=maxWidth-k;k++)</div><div class="line">            &#123;</div><div class="line">                l += words[i+k].size();</div><div class="line">            &#125;</div><div class="line">            string tmp = words[i];</div><div class="line">            for (int j=0;j&lt;k-1;j++)</div><div class="line">            &#123;</div><div class="line">                if(i+k&gt;=words.size())</div><div class="line">                    tmp += &quot; &quot;;</div><div class="line">                else</div><div class="line">                    tmp += string((maxWidth - l) / (k - 1) + (j &lt; (maxWidth - l) % (k - 1)), &apos; &apos;);</div><div class="line">                tmp+=words[i+j+1];</div><div class="line">            &#125;</div><div class="line">            tmp += string(maxWidth-tmp.size(),&apos; &apos;);</div><div class="line">            res.push_back(tmp);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of words and a length L, format the text such that 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Decision tree</title>
    <link href="http://www.mysry.com/2017/12/02/Decision-tree/"/>
    <id>http://www.mysry.com/2017/12/02/Decision-tree/</id>
    <published>2017-12-02T06:57:27.000Z</published>
    <updated>2017-12-02T09:42:01.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="决策树">决策树</h2><p>  决策树是一种基本的分类和回归算法。分类决策树是一种描述对实例进行分类的树形结构。决策树是由节点和有向边组成，节点分为内部节点和叶节点。内部节点表示一个特征或属性，叶节点表示一个类。<br>   用决策树分类，从根节点开始，对实例的某一个特征进行测试，根据测试结果将实例分配给子节点，这时，每个子结点对应着改特征的一个取值，这样递归的进行分配测试，直到达到叶节点，把实例归为叶节点的类。<br></p><h2 id="特征的选择">特征的选择</h2><p>  特征选择在于选择对数据分类能力较强的特征作为结点。通常的特征选择准则是信息增益或信息增益比。<br></p><h3 id="信息熵">信息熵</h3><p>  对于概率分布为<span class="math display">\[P(X=x_i)=p_i, i=1,2,...,n\]</span>的随机变量X，其信息熵定义为<span class="math display">\[H(p)=-\sum_{i=1}^n p_i \log p_i\]</span>若<span class="math inline">\(p_i=0\)</span>定义<span class="math inline">\(0\log0=0\)</span>熵越大，随机变量的不确定性也就越大。假设由随机变量(X,Y)，其联合概率分布为<span class="math display">\[P(X=x_i,Y=y_i)=p_{ij},i=1,2,...,n; j=1,2,...,m\]</span>条件熵<span class="math inline">\(H(Y|X)\)</span>表示在已知随机变量X的条件下随机变量Y的不确定性，随机变量X给定的条件下随机变量Y的条件熵<span class="math inline">\(H(Y|X)\)</span>，定义为X再给定条件Y的条件概率分布的熵对X的数学期望<span class="math display">\[H(Y|X)=\sum_{i=1}^n p_i H(Y|X=x_i)\]</span>其中<span class="math inline">\(p_i=P(X=x_i), i=1,2,...,n\)</span>.<br></p><h3 id="信息增益">信息增益</h3><p>  信息增益表示在已知条件X的信息而使得类Y的信息不确定度减少的程度。特征A对训练数据集D的信息增益g(D,A),定义为集合D的经验熵H(D)与特征A在给定的条件下D的经验条件熵之差，即<span class="math display">\[g(D,A)=H(D)-H(D|A)\]</span>决策树中的信息增益等价于训练数据集中类与特征的互信息。<br>   设训练数据集D，|D|表示样本容量，假设有k个子类<span class="math inline">\(C_k\)</span>，k=1,2,…,K,<span class="math inline">\(|C_k|\)</span>为类<span class="math inline">\(C_k\)</span>样本个数.<span class="math inline">\(\sum_{k=1}^K |C_k|=|D|\)</span>.设特征A有n个不同的取值<span class="math inline">\({a_1,a_2,...,a_n}\)</span>，根据特征A的取值将D划分为n个子集<span class="math inline">\(D_1,D_2,...,D_n\)</span>,|D_i|为<span class="math inline">\(D_i\)</span>的样本数目，同样<span class="math inline">\(\sum_{i=1}^n |D_i|=|D|\)</span>.记子集<span class="math inline">\(D_i\)</span>中属于样本的集合为<span class="math inline">\(D_{ik}\)</span>，即<span class="math inline">\(D_{ij}=D_i \cap C_k\)</span>,<span class="math inline">\(|D_{ik}|\)</span>为<span class="math inline">\(D_{ik}\)</span>的样本个数，则有如下信息增益的算法:<br> - 计算数据集D的经验熵H(D)<span class="math display">\[H(D)=-\sum_{i=1}^K \frac{|C_k|}{|D|}\log_2\frac{|C_k|}{|D|}\]</span><br> - 计算特征A对数据集D的经验条件熵H(D|A)<span class="math display">\[H(D|A)=\sum_{i=1}^n\frac{|D_i|}{|D|}H(D_i) = -\sum_{i=1}^n\frac{|D_i|}{|D|} \sum_{k=1}^K \frac{|D_{ik}|}{|D_i|}\log_2 \frac{|D_{ik}|}{|D_i|}\]</span><br> - 计算信息增益比<span class="math display">\[g(D,A)=H(D)-H(D|A)\]</span><br></p><h3 id="信息增益比">信息增益比</h3><p>  特征A对数据集D的信息增益比<span class="math inline">\(g_R (D,A)\)</span>定义为其信息增益g(D,A)与训练数据集D关于特征值A的熵<span class="math inline">\(H_A (D)\)</span>之比，即<span class="math display">\[g_R(D,A)=\frac{g(D,A)}{H_A (D)}\]</span>其中，<span class="math inline">\(H_A (D)= -\sum_{i=1}^n \frac{|D_i|}{|D|} \log_2 \frac{|D_i|}{|D|}\)</span>,n是特征A取值的个数。</p><h2 id="决策树的生成">决策树的生成</h2><h3 id="id3-算法">ID3 算法</h3><p>输入：训练数据集D，特征集A，阈值<span class="math inline">\(\epsilon\)</span>;<br> 输出：决策树T.<br> - 若D中所有实例同属于一类<span class="math inline">\(C_k\)</span>，则T为单结点树，并将<span class="math inline">\(C_k\)</span>作为该结点的类标记，返回T;<br> - 若<span class="math inline">\(A=\varnothing\)</span>,则T为单结点树，并将D中实例数最大的类<span class="math inline">\(C_k\)</span>作为该结点的类标识，返回T;<br> - 否则，计算A中各特征对D的信息增益，选择信息增益最大的特征<span class="math inline">\(A_g\)</span>;<br> - 如果<span class="math inline">\(A_g\)</span>的信息增益小于阈值<span class="math inline">\(\varnothing\)</span>,则置T为单结点树，并将D中的实例数最大的类<span class="math inline">\(C_k\)</span>作为该节点的类标记，返回T;<br> - 否则，对<span class="math inline">\(A_g\)</span>的每一个可能的取值<span class="math inline">\(a_i\)</span>，依<span class="math inline">\(A_g=a_i\)</span>将D分割为若干个非空子集<span class="math inline">\(D_i\)</span>,<span class="math inline">\(D_i\)</span>中实例最大的类作为标记，构建子节点，由节点及其字节点构成树T，返回T;<br> - 对于第i个子结点，以<span class="math inline">\(D_i\)</span>为训练集，以<span class="math inline">\(A-\{A_g\}\)</span>为特征集。递归调用上述5步，得到字数<span class="math inline">\(T_i\)</span>，返回<span class="math inline">\(T_i\)</span>.<br></p><h3 id="c4.5-生成算法">C4.5 生成算法</h3><p>  以信息增益作为划分数据集的特征，存在偏向于选择特征较多的问题，使用信息增益比可以改善这一情况。<br> 输入：训练数据集D，特征集A，阈值<span class="math inline">\(\epsilon\)</span>;<br> 输出：决策树T.<br> - 若D中所有实例同属于一类<span class="math inline">\(C_k\)</span>，则T为单结点树，并将<span class="math inline">\(C_k\)</span>作为该结点的类标记，返回T;<br> - 若<span class="math inline">\(A=\varnothing\)</span>,则T为单结点树，并将D中实例数最大的类<span class="math inline">\(C_k\)</span>作为该结点的类标识，返回T;<br> - 否则，计算A中各特征对D的信息增益比，选择信息增益比最大的特征<span class="math inline">\(A_g\)</span>;<br> - 如果<span class="math inline">\(A_g\)</span>的信息增益比小于阈值<span class="math inline">\(\varnothing\)</span>,则置T为单结点树，并将D中的实例数最大的类<span class="math inline">\(C_k\)</span>作为该节点的类标记，返回T;<br> - 否则，对<span class="math inline">\(A_g\)</span>的每一个可能的取值<span class="math inline">\(a_i\)</span>，依<span class="math inline">\(A_g=a_i\)</span>将D分割为若干个非空子集<span class="math inline">\(D_i\)</span>,<span class="math inline">\(D_i\)</span>中实例最大的类作为标记，构建子节点，由节点及其字节点构成树 T，返回T;<br> - 对于第i个子结点，以<span class="math inline">\(D_i\)</span>为训练集，以<span class="math inline">\(A-\{A_g\}\)</span>为特征集。递归调用上述5步，得到字数<span class="math inline">\(T_i\)</span>，返回<span class="math inline">\(T_i\)</span>.<br></p><center>To be continued…</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;决策树&quot;&gt;决策树&lt;/h2&gt;
&lt;p&gt;  决策树是一种基本的分类和回归算法。分类决策树是一种描述对实例进行分类的树形结构。决策树是由节点和有向边组成，节点分为内部节点和叶节点。内部节点表示一个特征或属性，叶节点表示一个类。&lt;br&gt;   用决策树分类，从根节点开始，对实
      
    
    </summary>
    
    
      <category term="Machine learning" scheme="http://www.mysry.com/tags/Machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>63. Unique Paths II</title>
    <link href="http://www.mysry.com/2017/11/30/63-Unique-Paths-II/"/>
    <id>http://www.mysry.com/2017/11/30/63-Unique-Paths-II/</id>
    <published>2017-11-30T13:49:57.000Z</published>
    <updated>2017-11-30T13:53:00.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Follow up for “Unique Paths”: Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Also use dp to solve this problem.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int uniquePathsWithObstacles(int[][] obstacleGrid) &#123;</div><div class="line">      int width = obstacleGrid[0].length;</div><div class="line">int []dp = new int[width];</div><div class="line">dp[0]=1;</div><div class="line">for (int[]row:obstacleGrid) &#123;</div><div class="line">for (int j=0;j&lt;width;j++) &#123;</div><div class="line">if(row[j]==1)</div><div class="line">dp[j]=0;</div><div class="line">else if (j&gt;0)</div><div class="line">dp[j]+=dp[j-1];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return dp[width-1];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow up for “Unique Paths”: Now consider if some obstacles are a
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>64. Minimum Path Sum</title>
    <link href="http://www.mysry.com/2017/11/30/64-Minimum-Path-Sum/"/>
    <id>http://www.mysry.com/2017/11/30/64-Minimum-Path-Sum/</id>
    <published>2017-11-30T13:43:30.000Z</published>
    <updated>2017-11-30T13:49:10.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.(you can only move down or right.)</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Use the Dp solution and four condition when we move.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int minPathSum(int[][] grid) &#123;</div><div class="line">        int m = grid.length;</div><div class="line">int n = grid[0].length;</div><div class="line">for (int i = 0; i &lt; m; i++) &#123;</div><div class="line">for (int j = 0; j &lt; n; j++) &#123;</div><div class="line">if (i == 0 &amp;&amp; j != 0) &#123;</div><div class="line">grid[i][j] = grid[i][j] + grid[i][j - 1];</div><div class="line">&#125; else if (i != 0 &amp;&amp; j == 0) &#123;</div><div class="line">grid[i][j] = grid[i][j] + grid[i - 1][j];</div><div class="line">&#125; else if (i == 0 &amp;&amp; j == 0) &#123;</div><div class="line">grid[i][j] = grid[i][j];</div><div class="line">&#125;else &#123;</div><div class="line">grid[i][j]=Math.min(grid[i-1][j], grid[i][j-1])+grid[i][j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return grid[m-1][n-1];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a m x n grid filled with non-negative numbers, find a path f
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>61. Rotate List</title>
    <link href="http://www.mysry.com/2017/11/29/61-Rotate-List/"/>
    <id>http://www.mysry.com/2017/11/29/61-Rotate-List/</id>
    <published>2017-11-29T13:01:30.000Z</published>
    <updated>2017-11-29T13:05:45.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a list, rotate the list to the right by k places, where k is non-negative.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Get the length of the list and then chang move to the (i-k%i)th node before we do rotate.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public ListNode rotateRight(ListNode head, int k) &#123;</div><div class="line">      if (head == null || head.next == null)</div><div class="line">return head;</div><div class="line">ListNode d = new ListNode(0);</div><div class="line">d.next = head;</div><div class="line">ListNode fast = d, slow = d;</div><div class="line">int i;</div><div class="line">for (i = 0; fast.next != null; i++)</div><div class="line">fast = fast.next;</div><div class="line">for (int j = i - k % i; j &gt; 0; j--)</div><div class="line">slow = slow.next;</div><div class="line">fast.next = d.next;</div><div class="line">d.next = slow.next;</div><div class="line">slow.next = null;</div><div class="line">return d.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a list, rotate the list to the right by k places, where k is
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>62. Unique Paths</title>
    <link href="http://www.mysry.com/2017/11/29/62-Unique-Paths/"/>
    <id>http://www.mysry.com/2017/11/29/62-Unique-Paths/</id>
    <published>2017-11-29T12:52:09.000Z</published>
    <updated>2017-11-29T13:00:19.033Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below). How many possible unique paths are there?</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Let’s choose (n - 1) movements(number of steps to the right) from (m + n - 2), and rest (m - 1) is (number of steps down).count of different paths are all combinations (n - 1) movements from (m + n-2).</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int uniquePaths(int m, int n) &#123;</div><div class="line">     int[][] grid = new int[m][n];</div><div class="line">for (int i=0;i&lt;m;i++) &#123;</div><div class="line">for (int j=0;j&lt;n;j++) &#123;</div><div class="line">if(i==0||j==0)</div><div class="line">grid[i][j]=1;</div><div class="line">else</div><div class="line">grid[i][j]=grid[i][j-1]+grid[i-1][j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return grid [m-1][n-1];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A robot is located at the top-left corner of a m x n grid (marked 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>60. Permutation Sequence</title>
    <link href="http://www.mysry.com/2017/11/28/60-Permutation-Sequence/"/>
    <id>http://www.mysry.com/2017/11/28/60-Permutation-Sequence/</id>
    <published>2017-11-28T14:52:49.000Z</published>
    <updated>2017-11-28T14:56:54.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p></blockquote><blockquote><p>By listing and labeling all of the permutations in order,Given n and k, return the kth permutation sequence.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> It’s more likely to be a math problem! <a href="https://leetcode.com/problems/permutation-sequence/discuss/" target="_blank" rel="external">more details</a></p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public String getPermutation(int n, int k) &#123;</div><div class="line">      List&lt;Integer&gt;num = new LinkedList&lt;Integer&gt;();</div><div class="line">for(int i=1;i&lt;=n;i++)</div><div class="line">num.add(i);</div><div class="line">int[]fact = new int[n];</div><div class="line">fact[0]=1;</div><div class="line">for (int i=1;i&lt;n;i++)</div><div class="line">fact[i]=i*fact[i-1];</div><div class="line">k=k-1;</div><div class="line">StringBuilder sb=new StringBuilder();</div><div class="line">for(int i=n;i&gt;0;i--) &#123;</div><div class="line">int ind =k/fact[i-1];</div><div class="line">k=k%fact[i-1];</div><div class="line">sb.append(num.get(ind));</div><div class="line">num.remove(ind);</div><div class="line">&#125;</div><div class="line">return sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The set [1,2,3,…,n] contains a total of n! unique permutations.&lt;/p
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>59. Spiral Matrix II</title>
    <link href="http://www.mysry.com/2017/11/28/59-Spiral-Matrix-II/"/>
    <id>http://www.mysry.com/2017/11/28/59-Spiral-Matrix-II/</id>
    <published>2017-11-28T14:48:57.000Z</published>
    <updated>2017-11-28T14:52:31.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an integer n, generate a square matrix filled with elements from 1 to <span class="math inline">\(n^2\)</span> in spiral order.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Generate matrix as the order, and be careful of the stopping condition.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int[][] generateMatrix(int n) &#123;</div><div class="line">      int[][] matrix = new int[n][n];</div><div class="line">if (n == 0)</div><div class="line">return matrix;</div><div class="line">int num=1;</div><div class="line">int rowStart = 0, rowEnd = n - 1, colStart = 0, colEnd = n - 1;</div><div class="line">while(rowStart&lt;=rowEnd&amp;&amp;colStart&lt;=colEnd) &#123;</div><div class="line">for (int i=colStart;i&lt;=colEnd;i++)</div><div class="line">matrix[rowStart][i]=num++;</div><div class="line">rowStart++;</div><div class="line">for(int i=rowStart;i&lt;=rowEnd;i++)</div><div class="line">matrix[i][colEnd]=num++;</div><div class="line">colEnd--;</div><div class="line">for (int i=colEnd;i&gt;=colStart;i--)</div><div class="line">if(rowStart&lt;=rowEnd)</div><div class="line">matrix[rowEnd][i]=num++;</div><div class="line">rowEnd--;</div><div class="line">for (int i=rowEnd;i&gt;=rowStart;i--)</div><div class="line">if(colStart&lt;=colEnd)</div><div class="line">matrix[i][colStart]=num++;</div><div class="line">colStart++;</div><div class="line">&#125;</div><div class="line">return matrix;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an integer n, generate a square matrix filled with elements 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>57. Insert Interval</title>
    <link href="http://www.mysry.com/2017/11/27/57-Insert-Interval/"/>
    <id>http://www.mysry.com/2017/11/27/57-Insert-Interval/</id>
    <published>2017-11-27T04:10:43.000Z</published>
    <updated>2017-11-27T04:15:50.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). You may assume that the intervals were initially sorted according to their start times.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> First, we add all the intervals ending before newInterval starts. Second, we merge all overlapping intervals to considering newInterval. At last, we add all the rest.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public List&lt;Interval&gt; insert(List&lt;Interval&gt; intervals, Interval newInterval) &#123;</div><div class="line">      List&lt;Interval&gt; result = new LinkedList&lt;&gt;();</div><div class="line">    int i = 0;</div><div class="line">    while (i &lt; intervals.size() &amp;&amp; intervals.get(i).end &lt; newInterval.start)</div><div class="line">        result.add(intervals.get(i++));</div><div class="line">    while (i &lt; intervals.size() &amp;&amp; intervals.get(i).start &lt;= newInterval.end) &#123;</div><div class="line">        newInterval = new Interval(</div><div class="line">                Math.min(newInterval.start, intervals.get(i).start),</div><div class="line">                Math.max(newInterval.end, intervals.get(i).end));</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    result.add(newInterval);</div><div class="line">    while (i &lt; intervals.size()) result.add(intervals.get(i++));</div><div class="line">    return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a set of non-overlapping intervals, insert a new interval in
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>56. Merge Intervals</title>
    <link href="http://www.mysry.com/2017/11/27/56-Merge-Intervals/"/>
    <id>http://www.mysry.com/2017/11/27/56-Merge-Intervals/</id>
    <published>2017-11-27T04:05:48.000Z</published>
    <updated>2017-11-27T04:10:21.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a collection of intervals, merge all overlapping intervals.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  The idea is to sort the intervals by their starting points. Then, we take the first interval and compare its end with the next intervals starts. As long as they overlap, we update the end to be the max end of the overlapping intervals. Once we find a non overlapping interval, we can add the previous “extended” interval and start over.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for an interval.</div><div class="line"> * public class Interval &#123;</div><div class="line"> *     int start;</div><div class="line"> *     int end;</div><div class="line"> *     Interval() &#123; start = 0; end = 0; &#125;</div><div class="line"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">    public List&lt;Interval&gt; merge(List&lt;Interval&gt; intervals) &#123;</div><div class="line">      if (intervals.size() &lt;= 1)</div><div class="line">return intervals;</div><div class="line">intervals.sort((i1, i2) -&gt; Integer.compare(i1.start, i2.start));</div><div class="line">List&lt;Interval&gt; result = new LinkedList&lt;Interval&gt;();</div><div class="line">int start = intervals.get(0).start;</div><div class="line">int end = intervals.get(0).end;</div><div class="line">for (Interval interval : intervals) &#123;</div><div class="line">if (interval.start &lt;= end)</div><div class="line">end = Math.max(end, interval.end);</div><div class="line">else &#123;</div><div class="line">result.add(new Interval(start, end));</div><div class="line">start = interval.start;</div><div class="line">end = interval.end;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">result.add(new Interval(start, end));</div><div class="line">return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a collection of intervals, merge all overlapping intervals.&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>AdaBoost</title>
    <link href="http://www.mysry.com/2017/11/26/AdaBoost/"/>
    <id>http://www.mysry.com/2017/11/26/AdaBoost/</id>
    <published>2017-11-26T11:28:00.000Z</published>
    <updated>2017-11-26T13:10:18.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提升boosting方法和adaboost">提升(boosting)方法和AdaBoost</h2><p>  Boosting是一种常用的统计学习方法，在分类问题中，它通过改变样本的权重学习多个分类器，并将这些分类器进行线性组合，以提升分类的性能。AdaBoost是Boosting算法的一种代表性算法。<br>   AdaBoost(Adaptive Boosting,自适应增强)，由Yoav Freund和Robert Schapire在1995年提出，其自适应在于：前一个基本分类器分错的样本会得到加强，加权后的全体样本再被用来训练下一个基本分类器。同时，在每一轮加入一个新的弱分类器，直接达到某个预定的足够小的错误率或达到预先指定的最大迭代次数。(总的来说，即加大被错误分类样本的权值和加大错误率小的分类器的权值)。<br>   具体来说AdaBoost算法分为以下三步：<br> (1)初始化训练数据的权值分布。如果由n个样本，则每个训练样本最开始时都被赋予相同的权值：1/N。<br> (2)训练弱分类器。具体训练过程中，如果某个样本点已经被准确地分类，那么在构造下一个训练集中，它的权值就被降低；相反，如果某个样本点没有被准确地分类，那么它的权值就得到提高。然后，权值更新过的样本集被用于训练下一个分类器，整个训练过程如此迭代地进行下去。<br> (3)将各个训练得到的弱分类器组合成强分类器。各个弱分类器的训练过程结束后，加大分类误差率小的弱分类器的权重，使其在最终的分类函数中起着较大的决定作用，而降低分类误差率大的弱分类器的权重，使其在最终的分类函数中起着较小的决定作用。换言之，误差率低的弱分类器在最终分类器中占的权重较大，否则较小。<br></p><h2 id="adaboost算法的流程">AdaBoost算法的流程</h2><p>输入：训练数据集<span class="math inline">\(T=\{(x_1,y_1),(x_2,y_2),...,(x_N,y_N)\}\)</span>,其中<span class="math inline">\(x_i\in\chi\subseteq R^n\)</span>,<span class="math inline">\(y\in\nu=\{-1,+1\}\)</span>;弱学习算法;<br> 输出：最终分类器G(x)<br> (1)初始化训练权值分布<span class="math display">\[D_1=(\omega_{11},\omega_{12},...,\omega_{1N}),\omega_{1i}==\frac{1}{N},i=1,2,...,N\]</span> <br> (2)对m=1,2,…,M:<br>    (a)使用权值分布<span class="math inline">\(D_m\)</span>的训练数据集学习，得到基分类器<span class="math display">\[G_m(x):\chi\to\{-1,+1\}\]</span><br>   (b)计算<span class="math inline">\(G_m\)</span>在训练数据集上的分类误差率<span class="math display">\[e_m=\sum_{i=1}^N P(G_m (x_i)\neq y_i)=\sum_{i=1}^N \omega_{mi} I(G_m (x_i)\neq y_i)\]</span> <br>   (c)计算<span class="math inline">\(G_m(x)\)</span>的系数<span class="math display">\[\alpha_m=\frac{1}{2}\log\frac{1-e_m}{e_m}\]</span>这里的对数是自然对数;<br>   (d)更新训练数据集的权值分布<span class="math display">\[D_{m+1}=(\omega_{m+1,1},...,\omega_{m+1,i},...,\omega_{m+1,N})\]</span> <span class="math display">\[\omega_{m+1,i}=\frac{\omega_{mi}}{Z_m}exp(-\alpha_m y_i G_m (x_i))\]</span>这里，<span class="math inline">\(Z_m\)</span>是规范化因子<span class="math display">\[Z_m = \sum_{i=1}^N \omega_{mi} exp(-\alpha_m y_i G_m (x_i))\]</span>它使得<span class="math inline">\(D_{m+1}\)</span>成为一个概率分布。<br> (3)构建基本分类器的线性组合<span class="math display">\[f(x)=\sum_{i=1}^M \alpha_m G_m (x)\]</span>得到最终分类器<span class="math display">\[G(x)=sign(f(x))=sign(\sum_{i=1}^M \alpha_m G_m (x))\]</span> <br></p><h2 id="adaboost算法的训练误差分析">AdaBoost算法的训练误差分析</h2><p>  AdaBoost最基本的性质是它能在学习过程中不断的减少训练误差，即在训练数据集上的分类误差率。</p><h3 id="adaboost的训练误差界">AdaBoost的训练误差界</h3><p>  AdaBoost算法最终分类器的训练误差界为<span class="math display">\[\frac{1}{N}\sum_{i=1}^N I(G(x_i)\neq y_i)\leq\frac{1}{N}\sum_i exp(-y_i f(x_i))=\prod_m Z_m\]</span>其中G(x),f(x)和<span class="math inline">\(Z_m\)</span>由算法流程中公式给出。</p><h3 id="二分类问题adaboost的训练误差界">二分类问题AdaBoost的训练误差界</h3><p><span class="math display">\[\prod_{m=1}^M Z_m=\prod_{m=1}^M [2\sqrt{e_m (1-e_m)}]=\prod_{m=1}^M \sqrt{(1-4\gamma_m^2)}\leq exp(-2\sum_{m=1}^M\gamma_m^2)\]</span>其中<span class="math inline">\(\gamma_m^2=\frac{1}{2}-e_m\)</span> <br>   相关推论:<br> 如果存在<span class="math inline">\(\gamma&gt;0\)</span>,且对所有的m都有<span class="math inline">\(\gamma_m\geq\gamma\)</span>，那么<span class="math display">\[\frac{1}{N}=\sum_{i=1}^N I(G(x_i)\neq y_i)\leq exp(-2M\gamma^2)\]</span>这表明在此条件下AdaBoost的训练误差界是以指数速率下降。</p><center color="red">To be continued…</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;提升boosting方法和adaboost&quot;&gt;提升(boosting)方法和AdaBoost&lt;/h2&gt;
&lt;p&gt;  Boosting是一种常用的统计学习方法，在分类问题中，它通过改变样本的权重学习多个分类器，并将这些分类器进行线性组合，以提升分类的性能。AdaBoo
      
    
    </summary>
    
    
      <category term="Machine learning" scheme="http://www.mysry.com/tags/Machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Ant Colony Optimization</title>
    <link href="http://www.mysry.com/2017/11/26/Ant-Colony-Optimization/"/>
    <id>http://www.mysry.com/2017/11/26/Ant-Colony-Optimization/</id>
    <published>2017-11-26T03:43:18.000Z</published>
    <updated>2017-11-26T04:02:21.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="蚁群算法介绍">蚁群算法介绍</h2><p>  最近在工作遇到了一个问题:遍历一个矩阵D(n,n)，矩阵元素是矩阵两两节点的距离，求使得路径最短的遍历路线？我上网查了一下，发现这个问题和有名的难题TSP(旅行商问题)是一致的，看了几种解法，最终选择了用蚁群算法来逼近最优解(这是一个NP hard的问题，通常时间复杂度为<span class="math inline">\(O(2^n)\)</span>)。</p><p>  什么是蚁群算法？蚁群算法是一种模拟蚂蚁觅食行为提出的一种基于种群的模拟进化算法。蚁群算法原理是一种正反馈机制或增强学习系统;它通过【最优路径上蚂蚁数量的增加→ 信息素强度增加→ 后来蚂蚁选择概率增大→ 最优路径上蚂蚁数量更大增加】达到最终收敛于最优路径上。蚁群算法是一种通用的随机优化算法，使用人工蚂蚁仿真，融入了智能人工蚂蚁（具有一定的记忆性），其复杂度为<span class="math inline">\(O(N_c * n^2 * m)\)</span>,<span class="math inline">\(N_c\)</span>是迭代次数，m是蚂蚁数量，n是节点数目。</p><h2 id="蚁群算法的一般步骤">蚁群算法的一般步骤</h2><h3 id="初始化">初始化</h3><p>  m只蚂蚁随机的放在n个城市，每只蚂蚁的禁忌表为当前蚂蚁所在的城市，各边的信息初始化为c。(禁忌表体现了人工蚂蚁的记忆性，使得蚂蚁不会走重复的路，提高了效率。)</p><h3 id="构造路径">构造路径</h3><p>  在t时刻，蚂蚁k从城市i转移到城市j的概率为:<span class="math display">\[P^k(i,j) =\frac{[\tau(i,j)]^{\alpha} * [\varphi(i,j)]^{\beta}}{\sum_{s \notin J_k (i)} [\tau(i,s)]^\alpha*[\varphi(i,s)]^\beta}\]</span>其中<span class="math inline">\(Taub_k\)</span>保存的是蚂蚁k已访问过的城市的集合，<span class="math inline">\(\alpha\)</span>,<span class="math inline">\(\beta\)</span>是系统参数，分别代表信息素，距离对蚂蚁选择路径的影响。<span class="math inline">\(\tau(i,j)\)</span>表示边L(i，j)上的信息素强度，<span class="math inline">\(\varphi(i,j)\)</span>表示可以根据由城市i到城市j的期望程度，根据启发式算法决定，一般为<span class="math inline">\(\frac{1}{d_{ij}}\)</span>，当<span class="math inline">\(\alpha=0\)</span>算法演变为传统的随机贪婪算法，最近邻城市被选中的概率最大,<span class="math inline">\(\beta=0\)</span>蚂蚁只根据信息素浓度确定路径，算法将快速收敛这样够出的路径与实际目标有着较大的差距。，一般在AS中设<span class="math inline">\(\alpha=1 \sim 2\)</span>,<span class="math inline">\(\beta=2 \sim 5\)</span>较为合理。</p><h3 id="更新信息">更新信息</h3><p>  在所有蚂蚁找到一条合法路径之后对信息进行更新。<span class="math display">\[\tau(t+1)=(1-\rho)\tau_{ij} + \sum_m \Delta\tau_{ij}^k(t,t+1)\]</span> <span class="math display">\[\Delta\tau_{ij}^k(t,t+1) =\frac{Q}{L_k}\]</span>其中<span class="math inline">\(\rho\)</span>为信息素挥发速率(<span class="math inline">\(0 \sim 1\)</span>之间的正数)，之所以设置<span class="math inline">\(\rho\)</span>，一方面是为了防止信息素无穷累积，一方面是为了提高系统搜索更好的可行解的能力，避免过早的失去搜索新路径的能力，<span class="math inline">\(\Delta\tau_{ij}\)</span>是蚂蚁在本次运行中留在路径L(i,j)的信息素强度，<span class="math inline">\(\Delta_{ij}^k\)</span>是蚂蚁k放置在边L(i,j)的信息素强度，Q表示蚂蚁所留轨迹为正常数(10,10000)，<span class="math inline">\(L_k\)</span>表示第k只蚂蚁在本次周游过程中所走的路径长度之和。在节点数目较多的情况下，无法找到最优解，可以设置信息素浓度区间，如(0.05,0.95)使系统永远保持搜索新路径的能力，避免陷入局部最优解。</p><h3 id="输出结果">输出结果</h3><p>  若迭代次数小于预订的最大迭代次数且无退化行为(找到的都是相同解)则转步骤二;否则输出目前的最优解。</p><h2 id="matlab代码">Matlab代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">function [ shortestRoute,shortestLength] = bestRoute( D,iter_max,m )</div><div class="line">% calculate the best routing by Ant Colony Algorithm</div><div class="line">% Input:</div><div class="line">%    - D: the distance of within-pair element;</div><div class="line">%    - iter_max: number of max iterations;</div><div class="line">%    - m: number of ants</div><div class="line">% Output:</div><div class="line">%    -shortestRoute: the best routing;</div><div class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</div><div class="line">%All coefficients can be adjusted according to your needs.%</div><div class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</div><div class="line"></div><div class="line"></div><div class="line">alpha = 1;</div><div class="line">beta = 5;</div><div class="line">rho = 0.2;</div><div class="line">Q = 1;</div><div class="line">n =size(D,1);</div><div class="line">%% per-process the element of distane matrix to prevent 1/0</div><div class="line">for i=1:n</div><div class="line">    for j=1:n</div><div class="line">        if D(i,j)==0</div><div class="line">            D(i,j) = eps;</div><div class="line">        end</div><div class="line">    end</div><div class="line">end</div><div class="line"></div><div class="line">Eta = 1./D;</div><div class="line">Tau = ones(n,n);</div><div class="line">Table = zeros(m,n);</div><div class="line">iter = 1;</div><div class="line">Route_best = zeros(iter_max,n);</div><div class="line">Length_best = zeros(iter_max, 1);</div><div class="line">Length_ave = zeros(iter_max,1);</div><div class="line">tic</div><div class="line">while iter&lt;=iter_max</div><div class="line">    start = zeros(m,1); </div><div class="line">    for i = 1:m</div><div class="line">        temp = randperm(n); %get the random starting node</div><div class="line">        start(i) = temp(1);</div><div class="line">    end</div><div class="line">    Table(:,1) = start;</div><div class="line">    citys_index = 1:n;</div><div class="line">    for i = 1:m   %update the Taboo table</div><div class="line">        for j = 2:n</div><div class="line">            tabu = Table(i,1:(j - 1));</div><div class="line">            allow_index = ~ismember(citys_index,tabu);</div><div class="line">            allow = citys_index(allow_index);</div><div class="line">            P = allow;</div><div class="line">            for k = 1:length(allow)</div><div class="line">                P(k) = Tau(tabu(end),allow(k))^alpha * Eta(tabu(end),allow(k))^beta;</div><div class="line">            end</div><div class="line">            P = P/sum(P);% Roulette method to choose the next city</div><div class="line">            Pc = cumsum(P);</div><div class="line">            target_index = find(Pc &gt;= rand);</div><div class="line">            target = allow(target_index(1));</div><div class="line">            Table(i,j) = target;</div><div class="line">        end</div><div class="line">    end</div><div class="line">    Length = zeros(m,1);</div><div class="line">    for i = 1:m</div><div class="line">        Route = Table(i,:);</div><div class="line">        for j = 1:(n - 1) % Record length</div><div class="line">            Length(i) = Length(i) + D(Route(j),Route(j + 1));</div><div class="line">        end</div><div class="line">        Length(i) = Length(i) + D(Route(n),Route(1));</div><div class="line">    end</div><div class="line">    if iter == 1 %update the route table</div><div class="line">        [min_Length,min_index] = min(Length);</div><div class="line">        Length_best(iter) = min_Length;</div><div class="line">        Length_ave(iter) = mean(Length);</div><div class="line">        Route_best(iter,:) = Table(min_index,:);</div><div class="line">    else</div><div class="line">        [min_Length,min_index] = min(Length);</div><div class="line">        Length_best(iter) = min(Length_best(iter - 1),min_Length);</div><div class="line">        Length_ave(iter) = mean(Length);</div><div class="line">        if Length_best(iter) == min_Length</div><div class="line">            Route_best(iter,:) = Table(min_index,:);</div><div class="line">        else</div><div class="line">            Route_best(iter,:) = Route_best((iter-1),:);</div><div class="line">        end</div><div class="line">    end</div><div class="line">    Delta_Tau = zeros(n,n); %Update pheromone table</div><div class="line">    for i = 1:m</div><div class="line">        for j = 1:(n - 1)</div><div class="line">            Delta_Tau(Table(i,j),Table(i,j+1)) = Delta_Tau(Table(i,j),Table(i,j+1)) + Q/Length(i);</div><div class="line">        end</div><div class="line">        Delta_Tau(Table(i,n),Table(i,1)) = Delta_Tau(Table(i,n),Table(i,1)) + Q/Length(i);</div><div class="line">    end</div><div class="line">    Tau = (1-rho) * Tau + Delta_Tau;</div><div class="line">    iter = iter + 1;</div><div class="line">    Table = zeros(m,n);</div><div class="line">end</div><div class="line">toc</div><div class="line">[shortestLength,index] = min(Length_best); %Output </div><div class="line">shortestRoute = Route_best(index,:);</div><div class="line">end</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;蚁群算法介绍&quot;&gt;蚁群算法介绍&lt;/h2&gt;
&lt;p&gt;  最近在工作遇到了一个问题:遍历一个矩阵D(n,n)，矩阵元素是矩阵两两节点的距离，求使得路径最短的遍历路线？我上网查了一下，发现这个问题和有名的难题TSP(旅行商问题)是一致的，看了几种解法，最终选择了用蚁群算法来
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.mysry.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>55. Jump Game</title>
    <link href="http://www.mysry.com/2017/11/25/55-Jump-Game/"/>
    <id>http://www.mysry.com/2017/11/25/55-Jump-Game/</id>
    <published>2017-11-25T14:17:29.000Z</published>
    <updated>2017-11-25T14:24:47.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p></blockquote><blockquote><p>Each element in the array represents your maximum jump length at that position.</p></blockquote><blockquote><p>Determine if you are able to reach the last index.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Reverse checking from the tail step, if every step id reachable, than move forward.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean canJump(int[] nums) &#123;</div><div class="line">        int last =nums.length-1,i,j;</div><div class="line">for(i=nums.length-2;i&gt;=0;i--) &#123;</div><div class="line">if(i+nums[i]&gt;=last)</div><div class="line">last=i;</div><div class="line">&#125;</div><div class="line">return last&lt;=0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of non-negative integers, you are initially positio
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>54. Spiral Matrix</title>
    <link href="http://www.mysry.com/2017/11/25/54-Spiral-Matrix/"/>
    <id>http://www.mysry.com/2017/11/25/54-Spiral-Matrix/</id>
    <published>2017-11-25T14:13:16.000Z</published>
    <updated>2017-11-25T14:17:40.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> We traverse right and increment rowBegin, then traverse down and decrement colEnd, then we traverse left and decrement rowEnd, and finally we traverse up and increment colBegin. The only tricky part is that when we traverse left or upwe have to check whether the row or col still exists to prevent duplicates.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;Integer&gt; spiralOrder(int[][] matrix) &#123;</div><div class="line">      List&lt;Integer&gt; res =new ArrayList&lt;Integer&gt;();</div><div class="line">if(matrix.length==0)</div><div class="line">return res;</div><div class="line">int rowBegin=0;</div><div class="line">int rowEnd=matrix.length-1;</div><div class="line">int colBegin = 0;</div><div class="line">int colEnd = matrix[0].length-1;</div><div class="line">while(rowBegin&lt;=rowEnd&amp;&amp;colBegin&lt;=colEnd) &#123;</div><div class="line">for (int j=colBegin;j&lt;=colEnd;j++)</div><div class="line">res.add(matrix[rowBegin][j]);</div><div class="line">rowBegin++;</div><div class="line">for (int j=rowBegin;j&lt;=rowEnd;j++)</div><div class="line">res.add(matrix[j][colEnd]);</div><div class="line">colEnd--;</div><div class="line">if(rowBegin&lt;=rowEnd) &#123;</div><div class="line">for (int j=colEnd;j&gt;=colBegin;j--)</div><div class="line">res.add(matrix[rowEnd][j]);</div><div class="line">&#125;</div><div class="line">rowEnd--;</div><div class="line">if(colBegin&lt;=colEnd) &#123;</div><div class="line">for (int j=rowEnd;j&gt;=rowBegin;j--)</div><div class="line">res.add(matrix[j][colBegin]);</div><div class="line">&#125;</div><div class="line">colBegin++;</div><div class="line">&#125;</div><div class="line">return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a matrix of m x n elements (m rows, n columns), return all e
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>52. N-Queens II</title>
    <link href="http://www.mysry.com/2017/11/25/52-N-Queens-II/"/>
    <id>http://www.mysry.com/2017/11/25/52-N-Queens-II/</id>
    <published>2017-11-25T14:09:57.000Z</published>
    <updated>2017-11-25T14:12:56.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Follow up for N-Queens problem.</p></blockquote><blockquote><p>Now, instead outputting board configurations, return the total number of distinct solutions.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> See the previous blog.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    int count =0;</div><div class="line">public int totalNQueens(int n) &#123;</div><div class="line">boolean[]cols = new boolean[n];</div><div class="line">boolean[]d1 = new boolean[2*n];</div><div class="line">boolean[]d2 = new boolean[2*n];</div><div class="line">backtracking(0,cols,d1,d2,n);</div><div class="line">return count;</div><div class="line">&#125;</div><div class="line">public void backtracking(int row,boolean[]cols,boolean[]d1,boolean[]d2,int n) &#123;</div><div class="line">if(row ==n) count++;</div><div class="line">for(int col =0;col&lt;n;col++) &#123;</div><div class="line">int id1=col-row+n;</div><div class="line">int id2=col+row;</div><div class="line">if(cols[col]||d1[id1]||d2[id2]) continue;</div><div class="line">cols[col]=true;</div><div class="line">d1[id1]=true;</div><div class="line">d2[id2]=true;</div><div class="line">backtracking(row+1,cols,d1,d2,n);</div><div class="line">cols[col]=false;d1[id1]=false;d2[id2]=false;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow up for N-Queens problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
