<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mysry</title>
  
  <subtitle>Life is short, learn more!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.mysry.com/"/>
  <updated>2017-11-26T04:02:21.804Z</updated>
  <id>http://www.mysry.com/</id>
  
  <author>
    <name>Mysry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ant Colony Optimization</title>
    <link href="http://www.mysry.com/2017/11/26/Ant-Colony-Optimization/"/>
    <id>http://www.mysry.com/2017/11/26/Ant-Colony-Optimization/</id>
    <published>2017-11-26T03:43:18.000Z</published>
    <updated>2017-11-26T04:02:21.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="蚁群算法介绍">蚁群算法介绍</h2><p>  最近在工作遇到了一个问题:遍历一个矩阵D(n,n)，矩阵元素是矩阵两两节点的距离，求使得路径最短的遍历路线？我上网查了一下，发现这个问题和有名的难题TSP(旅行商问题)是一致的，看了几种解法，最终选择了用蚁群算法来逼近最优解(这是一个NP hard的问题，通常时间复杂度为<span class="math inline">\(O(2^n)\)</span>)。</p><p>  什么是蚁群算法？蚁群算法是一种模拟蚂蚁觅食行为提出的一种基于种群的模拟进化算法。蚁群算法原理是一种正反馈机制或增强学习系统;它通过【最优路径上蚂蚁数量的增加→ 信息素强度增加→ 后来蚂蚁选择概率增大→ 最优路径上蚂蚁数量更大增加】达到最终收敛于最优路径上。蚁群算法是一种通用的随机优化算法，使用人工蚂蚁仿真，融入了智能人工蚂蚁（具有一定的记忆性），其复杂度为<span class="math inline">\(O(N_c * n^2 * m)\)</span>,<span class="math inline">\(N_c\)</span>是迭代次数，m是蚂蚁数量，n是节点数目。</p><h2 id="蚁群算法的一般步骤">蚁群算法的一般步骤</h2><h3 id="初始化">初始化</h3><p>  m只蚂蚁随机的放在n个城市，每只蚂蚁的禁忌表为当前蚂蚁所在的城市，各边的信息初始化为c。(禁忌表体现了人工蚂蚁的记忆性，使得蚂蚁不会走重复的路，提高了效率。)</p><h3 id="构造路径">构造路径</h3><p>  在t时刻，蚂蚁k从城市i转移到城市j的概率为:<span class="math display">\[P^k(i,j) =\frac{[\tau(i,j)]^{\alpha} * [\varphi(i,j)]^{\beta}}{\sum_{s \notin J_k (i)} [\tau(i,s)]^\alpha*[\varphi(i,s)]^\beta}\]</span>其中<span class="math inline">\(Taub_k\)</span>保存的是蚂蚁k已访问过的城市的集合，<span class="math inline">\(\alpha\)</span>,<span class="math inline">\(\beta\)</span>是系统参数，分别代表信息素，距离对蚂蚁选择路径的影响。<span class="math inline">\(\tau(i,j)\)</span>表示边L(i，j)上的信息素强度，<span class="math inline">\(\varphi(i,j)\)</span>表示可以根据由城市i到城市j的期望程度，根据启发式算法决定，一般为<span class="math inline">\(\frac{1}{d_{ij}}\)</span>，当<span class="math inline">\(\alpha=0\)</span>算法演变为传统的随机贪婪算法，最近邻城市被选中的概率最大,<span class="math inline">\(\beta=0\)</span>蚂蚁只根据信息素浓度确定路径，算法将快速收敛这样够出的路径与实际目标有着较大的差距。，一般在AS中设<span class="math inline">\(\alpha=1 \sim 2\)</span>,<span class="math inline">\(\beta=2 \sim 5\)</span>较为合理。</p><h3 id="更新信息">更新信息</h3><p>  在所有蚂蚁找到一条合法路径之后对信息进行更新。<span class="math display">\[\tau(t+1)=(1-\rho)\tau_{ij} + \sum_m \Delta\tau_{ij}^k(t,t+1)\]</span> <span class="math display">\[\Delta\tau_{ij}^k(t,t+1) =\frac{Q}{L_k}\]</span>其中<span class="math inline">\(\rho\)</span>为信息素挥发速率(<span class="math inline">\(0 \sim 1\)</span>之间的正数)，之所以设置<span class="math inline">\(\rho\)</span>，一方面是为了防止信息素无穷累积，一方面是为了提高系统搜索更好的可行解的能力，避免过早的失去搜索新路径的能力，<span class="math inline">\(\Delta\tau_{ij}\)</span>是蚂蚁在本次运行中留在路径L(i,j)的信息素强度，<span class="math inline">\(\Delta_{ij}^k\)</span>是蚂蚁k放置在边L(i,j)的信息素强度，Q表示蚂蚁所留轨迹为正常数(10,10000)，<span class="math inline">\(L_k\)</span>表示第k只蚂蚁在本次周游过程中所走的路径长度之和。在节点数目较多的情况下，无法找到最优解，可以设置信息素浓度区间，如(0.05,0.95)使系统永远保持搜索新路径的能力，避免陷入局部最优解。</p><h3 id="输出结果">输出结果</h3><p>  若迭代次数小于预订的最大迭代次数且无退化行为(找到的都是相同解)则转步骤二;否则输出目前的最优解。</p><h2 id="matlab代码">Matlab代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line">function [ shortestRoute,shortestLength] = bestRoute( D,iter_max,m )</div><div class="line">% calculate the best routing by Ant Colony Algorithm</div><div class="line">% Input:</div><div class="line">%    - D: the distance of within-pair element;</div><div class="line">%    - iter_max: number of max iterations;</div><div class="line">%    - m: number of ants</div><div class="line">% Output:</div><div class="line">%    -shortestRoute: the best routing;</div><div class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</div><div class="line">%All coefficients can be adjusted according to your needs.%</div><div class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</div><div class="line"></div><div class="line"></div><div class="line">alpha = 1;</div><div class="line">beta = 5;</div><div class="line">rho = 0.2;</div><div class="line">Q = 1;</div><div class="line">n =size(D,1);</div><div class="line">%% per-process the element of distane matrix to prevent 1/0</div><div class="line">for i=1:n</div><div class="line">    for j=1:n</div><div class="line">        if D(i,j)==0</div><div class="line">            D(i,j) = eps;</div><div class="line">        end</div><div class="line">    end</div><div class="line">end</div><div class="line"></div><div class="line">Eta = 1./D;</div><div class="line">Tau = ones(n,n);</div><div class="line">Table = zeros(m,n);</div><div class="line">iter = 1;</div><div class="line">Route_best = zeros(iter_max,n);</div><div class="line">Length_best = zeros(iter_max, 1);</div><div class="line">Length_ave = zeros(iter_max,1);</div><div class="line">tic</div><div class="line">while iter&lt;=iter_max</div><div class="line">    start = zeros(m,1); </div><div class="line">    for i = 1:m</div><div class="line">        temp = randperm(n); %get the random starting node</div><div class="line">        start(i) = temp(1);</div><div class="line">    end</div><div class="line">    Table(:,1) = start;</div><div class="line">    citys_index = 1:n;</div><div class="line">    for i = 1:m   %update the Taboo table</div><div class="line">        for j = 2:n</div><div class="line">            tabu = Table(i,1:(j - 1));</div><div class="line">            allow_index = ~ismember(citys_index,tabu);</div><div class="line">            allow = citys_index(allow_index);</div><div class="line">            P = allow;</div><div class="line">            for k = 1:length(allow)</div><div class="line">                P(k) = Tau(tabu(end),allow(k))^alpha * Eta(tabu(end),allow(k))^beta;</div><div class="line">            end</div><div class="line">            P = P/sum(P);% Roulette method to choose the next city</div><div class="line">            Pc = cumsum(P);</div><div class="line">            target_index = find(Pc &gt;= rand);</div><div class="line">            target = allow(target_index(1));</div><div class="line">            Table(i,j) = target;</div><div class="line">        end</div><div class="line">    end</div><div class="line">    Length = zeros(m,1);</div><div class="line">    for i = 1:m</div><div class="line">        Route = Table(i,:);</div><div class="line">        for j = 1:(n - 1) % Record length</div><div class="line">            Length(i) = Length(i) + D(Route(j),Route(j + 1));</div><div class="line">        end</div><div class="line">        Length(i) = Length(i) + D(Route(n),Route(1));</div><div class="line">    end</div><div class="line">    if iter == 1 %update the route table</div><div class="line">        [min_Length,min_index] = min(Length);</div><div class="line">        Length_best(iter) = min_Length;</div><div class="line">        Length_ave(iter) = mean(Length);</div><div class="line">        Route_best(iter,:) = Table(min_index,:);</div><div class="line">    else</div><div class="line">        [min_Length,min_index] = min(Length);</div><div class="line">        Length_best(iter) = min(Length_best(iter - 1),min_Length);</div><div class="line">        Length_ave(iter) = mean(Length);</div><div class="line">        if Length_best(iter) == min_Length</div><div class="line">            Route_best(iter,:) = Table(min_index,:);</div><div class="line">        else</div><div class="line">            Route_best(iter,:) = Route_best((iter-1),:);</div><div class="line">        end</div><div class="line">    end</div><div class="line">    Delta_Tau = zeros(n,n); %Update pheromone table</div><div class="line">    for i = 1:m</div><div class="line">        for j = 1:(n - 1)</div><div class="line">            Delta_Tau(Table(i,j),Table(i,j+1)) = Delta_Tau(Table(i,j),Table(i,j+1)) + Q/Length(i);</div><div class="line">        end</div><div class="line">        Delta_Tau(Table(i,n),Table(i,1)) = Delta_Tau(Table(i,n),Table(i,1)) + Q/Length(i);</div><div class="line">    end</div><div class="line">    Tau = (1-rho) * Tau + Delta_Tau;</div><div class="line">    iter = iter + 1;</div><div class="line">    Table = zeros(m,n);</div><div class="line">end</div><div class="line">toc</div><div class="line">[shortestLength,index] = min(Length_best); %Output </div><div class="line">shortestRoute = Route_best(index,:);</div><div class="line">end</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;蚁群算法介绍&quot;&gt;蚁群算法介绍&lt;/h2&gt;
&lt;p&gt;  最近在工作遇到了一个问题:遍历一个矩阵D(n,n)，矩阵元素是矩阵两两节点的距离，求使得路径最短的遍历路线？我上网查了一下，发现这个问题和有名的难题TSP(旅行商问题)是一致的，看了几种解法，最终选择了用蚁群算法来
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="http://www.mysry.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>55. Jump Game</title>
    <link href="http://www.mysry.com/2017/11/25/55-Jump-Game/"/>
    <id>http://www.mysry.com/2017/11/25/55-Jump-Game/</id>
    <published>2017-11-25T14:17:29.000Z</published>
    <updated>2017-11-25T14:24:47.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p></blockquote><blockquote><p>Each element in the array represents your maximum jump length at that position.</p></blockquote><blockquote><p>Determine if you are able to reach the last index.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Reverse checking from the tail step, if every step id reachable, than move forward.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean canJump(int[] nums) &#123;</div><div class="line">        int last =nums.length-1,i,j;</div><div class="line">for(i=nums.length-2;i&gt;=0;i--) &#123;</div><div class="line">if(i+nums[i]&gt;=last)</div><div class="line">last=i;</div><div class="line">&#125;</div><div class="line">return last&lt;=0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of non-negative integers, you are initially positio
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>54. Spiral Matrix</title>
    <link href="http://www.mysry.com/2017/11/25/54-Spiral-Matrix/"/>
    <id>http://www.mysry.com/2017/11/25/54-Spiral-Matrix/</id>
    <published>2017-11-25T14:13:16.000Z</published>
    <updated>2017-11-25T14:17:40.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> We traverse right and increment rowBegin, then traverse down and decrement colEnd, then we traverse left and decrement rowEnd, and finally we traverse up and increment colBegin. The only tricky part is that when we traverse left or upwe have to check whether the row or col still exists to prevent duplicates.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;Integer&gt; spiralOrder(int[][] matrix) &#123;</div><div class="line">      List&lt;Integer&gt; res =new ArrayList&lt;Integer&gt;();</div><div class="line">if(matrix.length==0)</div><div class="line">return res;</div><div class="line">int rowBegin=0;</div><div class="line">int rowEnd=matrix.length-1;</div><div class="line">int colBegin = 0;</div><div class="line">int colEnd = matrix[0].length-1;</div><div class="line">while(rowBegin&lt;=rowEnd&amp;&amp;colBegin&lt;=colEnd) &#123;</div><div class="line">for (int j=colBegin;j&lt;=colEnd;j++)</div><div class="line">res.add(matrix[rowBegin][j]);</div><div class="line">rowBegin++;</div><div class="line">for (int j=rowBegin;j&lt;=rowEnd;j++)</div><div class="line">res.add(matrix[j][colEnd]);</div><div class="line">colEnd--;</div><div class="line">if(rowBegin&lt;=rowEnd) &#123;</div><div class="line">for (int j=colEnd;j&gt;=colBegin;j--)</div><div class="line">res.add(matrix[rowEnd][j]);</div><div class="line">&#125;</div><div class="line">rowEnd--;</div><div class="line">if(colBegin&lt;=colEnd) &#123;</div><div class="line">for (int j=rowEnd;j&gt;=rowBegin;j--)</div><div class="line">res.add(matrix[j][colBegin]);</div><div class="line">&#125;</div><div class="line">colBegin++;</div><div class="line">&#125;</div><div class="line">return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a matrix of m x n elements (m rows, n columns), return all e
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>52. N-Queens II</title>
    <link href="http://www.mysry.com/2017/11/25/52-N-Queens-II/"/>
    <id>http://www.mysry.com/2017/11/25/52-N-Queens-II/</id>
    <published>2017-11-25T14:09:57.000Z</published>
    <updated>2017-11-25T14:12:56.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Follow up for N-Queens problem.</p></blockquote><blockquote><p>Now, instead outputting board configurations, return the total number of distinct solutions.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> See the previous blog.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    int count =0;</div><div class="line">public int totalNQueens(int n) &#123;</div><div class="line">boolean[]cols = new boolean[n];</div><div class="line">boolean[]d1 = new boolean[2*n];</div><div class="line">boolean[]d2 = new boolean[2*n];</div><div class="line">backtracking(0,cols,d1,d2,n);</div><div class="line">return count;</div><div class="line">&#125;</div><div class="line">public void backtracking(int row,boolean[]cols,boolean[]d1,boolean[]d2,int n) &#123;</div><div class="line">if(row ==n) count++;</div><div class="line">for(int col =0;col&lt;n;col++) &#123;</div><div class="line">int id1=col-row+n;</div><div class="line">int id2=col+row;</div><div class="line">if(cols[col]||d1[id1]||d2[id2]) continue;</div><div class="line">cols[col]=true;</div><div class="line">d1[id1]=true;</div><div class="line">d2[id2]=true;</div><div class="line">backtracking(row+1,cols,d1,d2,n);</div><div class="line">cols[col]=false;d1[id1]=false;d2[id2]=false;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow up for N-Queens problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>51. N-Queens</title>
    <link href="http://www.mysry.com/2017/11/25/51-N-Queens/"/>
    <id>http://www.mysry.com/2017/11/25/51-N-Queens/</id>
    <published>2017-11-25T14:02:30.000Z</published>
    <updated>2017-11-25T14:09:31.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other. Given an integer n, return all distinct solutions to the n-queens puzzle.</p></blockquote><blockquote><p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> We use three boolean arrays to check if the queen disobey the rules, the tree boolean arrays respectively are col, diagonal1 and diagonal2, use a backtracking support function to check every boolean array.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public void solve(List&lt;List&lt;String&gt;&gt; result, List&lt;String&gt; cur, int n, int rowCur, boolean[] col, boolean[] diag1,</div><div class="line">boolean[] diag2) &#123;</div><div class="line">if (rowCur == n) &#123;</div><div class="line">result.add(new ArrayList&lt;String&gt;(cur));</div><div class="line">return;</div><div class="line">&#125;</div><div class="line">for (int j = 0; j &lt; n; j++) &#123;</div><div class="line">int d1 = rowCur + j;</div><div class="line">int d2 = j - rowCur + n - 1;</div><div class="line">if (!col[j] &amp;&amp; !diag1[d1] &amp;&amp; !diag2[d2]) &#123;</div><div class="line">col[j] = true;</div><div class="line">diag1[d1] = true;</div><div class="line">diag2[d2] = true;</div><div class="line">char[] helpChars = new char[n];</div><div class="line">Arrays.fill(helpChars, &apos;.&apos;);</div><div class="line">helpChars[j] = &apos;Q&apos;;</div><div class="line">cur.add(new String(helpChars));</div><div class="line"></div><div class="line">solve(result, cur, n, rowCur + 1, col, diag1, diag2);</div><div class="line"></div><div class="line">col[j] = false;</div><div class="line">diag1[d1] = false;</div><div class="line">diag2[d2] = false;</div><div class="line">cur.remove(cur.size() - 1);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) &#123;</div><div class="line">List&lt;List&lt;String&gt;&gt; result = new ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">if (n &lt; 1)</div><div class="line">return result;</div><div class="line">solve(result, new ArrayList&lt;String&gt;(), n, 0, new boolean[n], new boolean[2 * n], new boolean[2 * n]);</div><div class="line">return result;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The n-queens puzzle is the problem of placing n queens on an n×n c
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>50. Pow(x,n)</title>
    <link href="http://www.mysry.com/2017/11/25/50-Pow-x-n/"/>
    <id>http://www.mysry.com/2017/11/25/50-Pow-x-n/</id>
    <published>2017-11-25T13:57:25.000Z</published>
    <updated>2017-11-25T14:01:59.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Implement pow(x, n).</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> If n is odd, then we need (n+1)/2 times x<em>x, after that use the ans devide x; if n is even, just n/2 times x</em>x is OK.</p><h2 id="java-code"><font color="orange">Java Code</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public double myPow(double x, int n) &#123;</div><div class="line">        double tmp=x;</div><div class="line">if (n==0) return 1;</div><div class="line">tmp =myPow(x,n/2);</div><div class="line">if(n%2==0)</div><div class="line">return tmp*tmp;</div><div class="line">else &#123;</div><div class="line">if (n&gt;0)</div><div class="line">return tmp*tmp*x;</div><div class="line">else</div><div class="line">return tmp*tmp/x;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Implement pow(x, n).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;idea&quot;&gt;&lt;font color=&quot;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>49. Group Anagrams </title>
    <link href="http://www.mysry.com/2017/11/25/49-Group-Anagrams/"/>
    <id>http://www.mysry.com/2017/11/25/49-Group-Anagrams/</id>
    <published>2017-11-25T13:51:12.000Z</published>
    <updated>2017-11-25T13:56:46.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an array of strings, group anagrams together.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  For every string, we first sorted the string and it will be easy for us to check if our map have such string and where we should put it to.</p><h2 id="java-code"><font color="" orange="">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</div><div class="line">        if(strs==null||strs.length==0) return new ArrayList&lt;List&lt;String&gt;&gt;();</div><div class="line">        Map&lt;String,List&lt;String&gt;&gt;map = new HashMap &lt;String,List&lt;String&gt;&gt;();</div><div class="line">        for (String s:strs)&#123;</div><div class="line">            char []ca = s.toCharArray();</div><div class="line">            Arrays.sort(ca);</div><div class="line">            String keyStr = String.valueOf(ca);</div><div class="line">            if(!map.containsKey(keyStr))</div><div class="line">                map.put(keyStr,new ArrayList&lt;String&gt;());</div><div class="line">            map.get(keyStr).add(s);</div><div class="line">        &#125;</div><div class="line">        return new ArrayList&lt;List&lt;String&gt;&gt;(map.values());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of strings, group anagrams together.&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>48. Rotate Image</title>
    <link href="http://www.mysry.com/2017/11/22/48-Rotate-Image/"/>
    <id>http://www.mysry.com/2017/11/22/48-Rotate-Image/</id>
    <published>2017-11-22T14:42:25.000Z</published>
    <updated>2017-11-25T13:50:42.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>You are given an n x n 2D matrix representing an image.</p></blockquote><blockquote><p>Rotate the image by 90 degrees (clockwise).</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> My suggestion is to plot the matrix with subindex, and then it may be clear.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public void rotate(int[][] matrix) &#123;</div><div class="line">        for (int i=0;i&lt;matrix.length;i++) &#123;</div><div class="line">for (int j=i;j&lt;matrix[0].length;j++) &#123;</div><div class="line">int tmp =0;</div><div class="line"> tmp = matrix[i][j];</div><div class="line"> matrix[i][j]= matrix[j][i];</div><div class="line"> matrix [j][i]=tmp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">for (int i=0;i&lt;matrix.length;i++) &#123;</div><div class="line">for (int j=0;j&lt;matrix.length/2;j++) &#123;</div><div class="line">int tmp=0;</div><div class="line">tmp=matrix[i][j];</div><div class="line">matrix[i][j]=matrix[i][matrix.length-1-j];</div><div class="line">matrix[i][matrix.length-1-j]=tmp;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You are given an n x n 2D matrix representing an image.&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>47. Permutations II</title>
    <link href="http://www.mysry.com/2017/11/22/47-Permutations-II/"/>
    <id>http://www.mysry.com/2017/11/22/47-Permutations-II/</id>
    <published>2017-11-22T14:37:47.000Z</published>
    <updated>2017-11-22T14:42:03.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Similar to the previous problem, we use an extra boolean array &quot; boolean[] used&quot; to indicate whether the value is added to list. And sort the array “int[] nums” to make sure we can skip the same value. When a number has the same value with its previous, we can use this number only if his previous is used.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res=new ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">if(nums==null||nums.length==0) return res;</div><div class="line">boolean []used = new boolean[nums.length];</div><div class="line">List&lt;Integer&gt;list = new ArrayList&lt;Integer&gt;();</div><div class="line">Arrays.sort(nums);</div><div class="line">dfs(nums,used,list,res);</div><div class="line">return res;</div><div class="line">&#125;</div><div class="line">public void dfs(int[]nums,boolean[]used,List&lt;Integer&gt;list,List&lt;List&lt;Integer&gt;&gt;res) &#123;</div><div class="line">if(list.size()==nums.length) &#123;</div><div class="line">res.add(new ArrayList&lt;Integer&gt;(list));</div><div class="line">return ;</div><div class="line">&#125;</div><div class="line">for (int i=0;i&lt;nums.length;i++) &#123;</div><div class="line">if(used[i])continue;</div><div class="line">if(i&gt;0&amp;&amp;nums[i-1]==nums[i]&amp;&amp;!used[i-1])continue;</div><div class="line">used[i]=true;</div><div class="line">list.add(nums[i]);</div><div class="line">dfs(nums,used,list,res);</div><div class="line">used[i]=false;</div><div class="line">list.remove(list.size()-1);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a collection of numbers that might contain duplicates, retur
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>46. Permutations</title>
    <link href="http://www.mysry.com/2017/11/21/46-Permutations/"/>
    <id>http://www.mysry.com/2017/11/21/46-Permutations/</id>
    <published>2017-11-21T15:35:43.000Z</published>
    <updated>2017-11-21T15:39:23.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a collection of distinct numbers, return all possible permutations.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Traversing nums (the first for loop), the result in res is the full array of nums [0] through nums [i-1] when starting nums [i]. In each iteration, you need to add nums [i] to each of the res results, and then start the next iteration. Specifically, each cycle begins by recording the size of the current res, taking the first one in res, adding nums [i] at each location, and adding it to the end of res (the third for loop, r .size ()), a total of size times (the second for loop).</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) &#123;</div><div class="line">        LinkedList&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">        res.add(new ArrayList&lt;Integer&gt;());</div><div class="line">        for (int n:nums)&#123;</div><div class="line">            int size = res.size();</div><div class="line">            for(;size&gt;0;size--)&#123;</div><div class="line">                List&lt;Integer&gt; r= res.pollFirst();</div><div class="line">                for (int i=0;i&lt;=r.size();i++)&#123;</div><div class="line">                    List&lt;Integer&gt; t= new ArrayList&lt;Integer&gt;(r);</div><div class="line">                    t.add(i,n);</div><div class="line">                    res.add(t);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a collection of distinct numbers, return all possible permut
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>45. Jump Game II</title>
    <link href="http://www.mysry.com/2017/11/21/45-Jump-Game-II/"/>
    <id>http://www.mysry.com/2017/11/21/45-Jump-Game-II/</id>
    <published>2017-11-21T15:27:23.000Z</published>
    <updated>2017-11-21T15:33:39.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p></blockquote><blockquote><p>Each element in the array represents your maximum jump length at that position.</p></blockquote><blockquote><p>Your goal is to reach the last index in the minimum number of jumps.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> set e to be longest distance in current minimum step set sc to be minimum steps for reaching e. From i to e, even max is changed in a loop, it is reachable in one step.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int jump(int[] nums) &#123;</div><div class="line">        int sc=0;</div><div class="line">        int e=0;</div><div class="line">        int max=0;</div><div class="line">        for(int i=0;i&lt;nums.length-1;i++)&#123;</div><div class="line">            max=Math.max(max,i+nums[i]);</div><div class="line">            if (i==e)&#123;</div><div class="line">                sc++;</div><div class="line">                e=max;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sc;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array of non-negative integers, you are initially positio
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>44. Wildcard Matching</title>
    <link href="http://www.mysry.com/2017/11/20/44-Wildcard-Matching/"/>
    <id>http://www.mysry.com/2017/11/20/44-Wildcard-Matching/</id>
    <published>2017-11-20T14:42:36.000Z</published>
    <updated>2017-11-20T14:46:31.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Implement wildcard pattern matching with support for ‘?’ and ‘<em>’. ’?’ Matches any single character. ’</em>’ Matches any sequence of characters (including the empty sequence).</p></blockquote><blockquote><p>The matching should cover the entire input string (not partial).</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> We use a dp table, just like the problem——<a href="http://www.mysry.com/2017/11/13/10-Regular-Expression-Matching/">Regular Expression Matching</a></p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean isMatch(String s, String p) &#123;</div><div class="line">        boolean[][]match= new boolean[s.length()+1][p.length()+1];</div><div class="line">match[s.length()][p.length()] = true;</div><div class="line">for (int i=p.length()-1;i&gt;=0;i--) &#123;</div><div class="line">if(p.charAt(i)!=&apos;*&apos;)</div><div class="line">break;</div><div class="line">else match[s.length()][i]=true;</div><div class="line">&#125;</div><div class="line">for (int i=s.length()-1;i&gt;=0;i--) &#123;</div><div class="line">for (int j=p.length()-1;j&gt;=0;j--) &#123;</div><div class="line">if(s.charAt(i)==p.charAt(j)||p.charAt(j)==&apos;?&apos;)</div><div class="line">match[i][j]=match[i+1][j+1];</div><div class="line">else if (p.charAt(j)==&apos;*&apos;)</div><div class="line">match[i][j]=match[i+1][j]||match[i][j+1];</div><div class="line">else</div><div class="line">match[i][j]=false;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return match[0][0];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Implement wildcard pattern matching with support for ‘?’ and ‘&lt;em&gt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>43. Multiply Strings</title>
    <link href="http://www.mysry.com/2017/11/20/43Multiply-Strings/"/>
    <id>http://www.mysry.com/2017/11/20/43Multiply-Strings/</id>
    <published>2017-11-20T14:38:02.000Z</published>
    <updated>2017-11-20T14:42:14.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.</p></blockquote><blockquote><p>Note:</p></blockquote><blockquote><p>The length of both num1 and num2 is &lt; 110. Both num1 and num2 contains only digits 0-9. Both num1 and num2 does not contain any leading zero. You must not use any built-in BigInteger library or convert the inputs to integer directly.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Start from right to left, perform multiplication on every pair of digits, and add them together. Let’s draw the process! From the following draft, we can immediately conclude:<code>num1[i] * num2[j]</code> will be placed at indices <code>[i + j</code>, <code>i + j + 1]</code> .</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public String multiply(String num1, String num2) &#123;</div><div class="line">        int m = num1.length(),n=num2.length();</div><div class="line">int []pos = new int [m+n];</div><div class="line">for (int i=m-1;i&gt;=0;i--) &#123;</div><div class="line">for (int j=n-1;j&gt;=0;j--) &#123;</div><div class="line">int mul=(num1.charAt(i)-&apos;0&apos;)*(num2.charAt(j)-&apos;0&apos;);</div><div class="line">int p1= i+j,p2=i+j+1;</div><div class="line">int sum =mul+pos[p2];</div><div class="line">pos[p1]+=sum/10;</div><div class="line">pos[p2]= sum%10;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">StringBuilder sb = new StringBuilder();</div><div class="line">for (int p:pos)</div><div class="line">if(!(sb.length()==0&amp;&amp;p==0)) sb.append(p);</div><div class="line">return sb.length()==0?&quot;0&quot;:sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given two non-negative integers num1 and num2 represented as strin
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>42. Trapping Rain Water</title>
    <link href="http://www.mysry.com/2017/11/19/42-Trapping-Rain-Water/"/>
    <id>http://www.mysry.com/2017/11/19/42-Trapping-Rain-Water/</id>
    <published>2017-11-19T12:13:19.000Z</published>
    <updated>2017-11-19T12:15:58.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Keep track of the maximum height from both forward directions backward directions, call them leftmax and rightmax.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int trap(int[] height) &#123;</div><div class="line">        int a=0,b=height.length-1,max=0,leftmax=0,rightmax=0;</div><div class="line">while(a&lt;b) &#123;</div><div class="line">leftmax=Math.max(leftmax, height[a]);</div><div class="line">rightmax=Math.max(rightmax, height[b]);</div><div class="line">if(leftmax&lt;rightmax) &#123;</div><div class="line">max+=leftmax-height[a];</div><div class="line">a++;</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">max+=(rightmax-height[b]);</div><div class="line">b--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given n non-negative integers representing an elevation map where 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>41. First Missing Positive</title>
    <link href="http://www.mysry.com/2017/11/19/41-First-Missing-Positive/"/>
    <id>http://www.mysry.com/2017/11/19/41-First-Missing-Positive/</id>
    <published>2017-11-19T12:07:34.000Z</published>
    <updated>2017-11-19T12:12:59.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given an unsorted integer array, find the first missing positive integer.</p></blockquote><blockquote><p>For example, Given [1,2,0] return 3, and [3,4,-1,1] return 2.</p></blockquote><blockquote><p>Your algorithm should run in O(n) time and uses constant space.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Swap the array element tomake the ith place store number i+1, then traverse the array, to find the first abnormal elements, return its index.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public int firstMissingPositive(int[] nums) &#123;</div><div class="line">    int i = 0;</div><div class="line">        while(i &lt; nums.length)&#123;</div><div class="line">            if(nums[i] == i+1 || nums[i] &lt;= 0 || nums[i] &gt; nums.length) i++;</div><div class="line">            else if(nums[nums[i]-1] != nums[i]) swap(nums, i, nums[i]-1);</div><div class="line">            else i++;</div><div class="line">        &#125;</div><div class="line">        i = 0;</div><div class="line">        while(i &lt; nums.length &amp;&amp; nums[i] == i+1) i++;</div><div class="line">        return i+1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void swap(int[] nums, int i, int j)&#123;</div><div class="line">        int temp = nums[i];</div><div class="line">        nums[i] = nums[j];</div><div class="line">        nums[j] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an unsorted integer array, find the first missing positive i
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>40. Combination Sum II</title>
    <link href="http://www.mysry.com/2017/11/19/40-Combination-Sum-II/"/>
    <id>http://www.mysry.com/2017/11/19/40-Combination-Sum-II/</id>
    <published>2017-11-19T10:01:40.000Z</published>
    <updated>2017-11-19T12:07:05.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p></blockquote><blockquote><p>Each number in C may only be used once in the combination.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Just skip the duplicated element!</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) &#123;</div><div class="line"></div><div class="line">    List&lt;List&lt;Integer&gt;&gt;list = new LinkedList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">Arrays.sort(candidates);</div><div class="line">backtrack(list,new ArrayList&lt;Integer&gt;(),candidates,target,0);</div><div class="line">return list;</div><div class="line">&#125;</div><div class="line">public void backtrack(List&lt;List&lt;Integer&gt;&gt;list,List&lt;Integer&gt;tempList,int[]can,int remain,int start) &#123;</div><div class="line">if(remain&lt;0) return;</div><div class="line">else if (remain==0) list.add(new ArrayList&lt;&gt;(tempList));</div><div class="line">else &#123;</div><div class="line">for (int i=start;i&lt;can.length;i++) &#123;</div><div class="line">if(i&gt;start&amp;&amp;can[i]==can[i-1])continue;</div><div class="line">tempList.add(can[i]);</div><div class="line">backtrack(list,tempList,can,remain-can[i],i+1);</div><div class="line">tempList.remove(tempList.size()-1);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a collection of candidate numbers (C) and a target number (T
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>39. Combination Sum</title>
    <link href="http://www.mysry.com/2017/11/19/39-Combination-Sum/"/>
    <id>http://www.mysry.com/2017/11/19/39-Combination-Sum/</id>
    <published>2017-11-19T09:56:30.000Z</published>
    <updated>2017-11-19T10:01:13.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p></blockquote><blockquote><p>The same repeated number may be chosen from C unlimited number of times.</p></blockquote><blockquote><p>Note: All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations. For example, given candidate set [2, 3, 6, 7] and target 7, A solution set is:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[7],</div><div class="line">[2, 2, 3]</div><div class="line"> ]</div></pre></td></tr></table></figure><h2 id="idea"><font color="red">Idea:</font></h2><p> The main idea reminds an approach for solving coins/knapsack problem - to store the result for all i lower than target and create the solution from them. For that for each t from 1 to our target we try every candidate which is less or equal to t in ascending order. For each candidate “c” we run through all combinations for target t-c starting with the value greater or equal than c to avoid duplicates and store only ordered combinations.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) &#123;</div><div class="line">        Arrays.sort(candidates);</div><div class="line">List&lt;List&lt;List&lt;Integer&gt;&gt;&gt; dp = new ArrayList&lt;&gt;();</div><div class="line">for (int i=1;i&lt;=target;i++) &#123;</div><div class="line">List&lt;List&lt;Integer&gt;&gt; newList = new ArrayList();</div><div class="line">for (int j=0;j&lt;candidates.length &amp;&amp;candidates[j]&lt;=i;j++) &#123;</div><div class="line">if(i == candidates[j])newList.add(Arrays.asList(candidates[j]));</div><div class="line">else for (List&lt;Integer&gt; l :dp.get(i-candidates[j]-1)) &#123;</div><div class="line">if(candidates[j]&lt;=l.get(0)) &#123;</div><div class="line">List cl = new ArrayList&lt;&gt;();</div><div class="line">cl.add(candidates[j]);</div><div class="line">cl.addAll(l);</div><div class="line">newList.add(cl);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">dp.add(newList);</div><div class="line">&#125;</div><div class="line">return dp.get(target-1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a set of candidate numbers (C) (without duplicates) and a ta
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>37. Sudoku Solver</title>
    <link href="http://www.mysry.com/2017/11/19/37-Sudoku-Solver/"/>
    <id>http://www.mysry.com/2017/11/19/37-Sudoku-Solver/</id>
    <published>2017-11-19T09:52:05.000Z</published>
    <updated>2017-11-19T09:55:23.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p></blockquote><blockquote><p>Empty cells are indicated by the character ‘.’.</p></blockquote><blockquote><p>You may assume that there will be only one unique solution.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p>  Try 1 through 9 for each cell. The time complexity should be 9 ^ m (m represents the number of blanks to be filled in), since each blank can have 9 choices. Details see the belong code.</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">   public void solveSudoku(char[][]board) &#123;</div><div class="line">if (board ==null||board.length==0) return;</div><div class="line">solve(board);</div><div class="line">&#125;</div><div class="line">public boolean solve(char[][] board)&#123;</div><div class="line">    for(int i = 0; i &lt; board.length; i++)&#123;</div><div class="line">        for(int j = 0; j &lt; board[0].length; j++)&#123;</div><div class="line">            if(board[i][j] == &apos;.&apos;)&#123;</div><div class="line">                for(char c = &apos;1&apos;; c &lt;= &apos;9&apos;; c++)&#123;</div><div class="line">                    if(isValid(board, i, j, c))&#123;</div><div class="line">                        board[i][j] = c;</div><div class="line"></div><div class="line">                        if(solve(board))</div><div class="line">                            return true;</div><div class="line">                        else</div><div class="line">                            board[i][j] = &apos;.&apos;;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line">private boolean isValid(char[][] board, int row, int col, char c)&#123;</div><div class="line">    for(int i = 0; i &lt; 9; i++) &#123;</div><div class="line">        if(board[i][col] != &apos;.&apos; &amp;&amp; board[i][col] == c) return false;</div><div class="line">        if(board[row][i] != &apos;.&apos; &amp;&amp; board[row][i] == c) return false;</div><div class="line">        if(board[3 * (row / 3) + i / 3][ 3 * (col / 3) + i % 3] != &apos;.&apos; &amp;&amp;</div><div class="line">board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a program to solve a Sudoku puzzle by filling the empty cell
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Logistic Regression</title>
    <link href="http://www.mysry.com/2017/11/18/Logistic-Regression/"/>
    <id>http://www.mysry.com/2017/11/18/Logistic-Regression/</id>
    <published>2017-11-18T11:29:51.000Z</published>
    <updated>2017-11-19T09:55:44.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sigmoid-函数">Sigmoid 函数</h2><p>  在介绍逻辑回归前我们先引入sigmoid函数，其数学形式是<span class="math display">\[g(x) =\frac{1}{1+e^{-x}}\]</span>sigmoid函数是一个s型函数，取值在<span class="math inline">\([0,1]\)</span>之间，在原离0的地方函数的值会很快接近0/1。</p><h2 id="logistic-分布">Logistic 分布</h2><p>  设X是连续随机变量，X服从逻辑斯蒂分布是指X具有下列分布函数和密度函数：<span class="math display">\[F(x)=P(X\leq x)=\frac{1}{1+e^{-(x-\mu)/\gamma}}\]</span> <span class="math display">\[f(x)=F^\prime(x)=\frac{e^{-(x-\mu)/\gamma}}{\gamma (1+e^{-(x-\mu)/\gamma})^2}\]</span>其中，<span class="math inline">\(\mu\)</span>是位置参数，<span class="math inline">\(\gamma&gt;0\)</span>为形状参数。</p><h2 id="logistic-regression-模型">Logistic Regression 模型</h2><p>  二项Logistic Regression模型是如下条件概率分布:<span class="math display">\[P(Y=1|x)=\frac{exp(\omega\cdot x+b)}{1+exp(\omega\cdot x+b)}\]</span> <span class="math display">\[P(Y=0|x)=\frac{1}{1+exp(\omega\cdot x+b)}\]</span>其中，<span class="math inline">\(x\in R^n\)</span>是输入，<span class="math inline">\(Y\in\{0,1\}\)</span>是输出，<span class="math inline">\(\omega\in R^n\)</span>和<span class="math inline">\(b\in R\)</span>是参数，<span class="math inline">\(\omega\)</span>是权值向量，b称为偏置，<span class="math inline">\(\omega\cdot x\)</span>是内积。</p><h2 id="模型参数估计">模型参数估计</h2>  对于给定的训练数据集<span class="math inline">\(T=\{(x_1,y_1),(x_2,y_2),...,(x_N,y_N)\}\)</span>,其中<span class="math inline">\(x_i\in R^n\)</span>,<span class="math inline">\(y_i\in\{0,1\}\)</span>,用极大似然法来估计模型参数，设<span class="math display">\[P(Y=1|x)=\pi(x),  P(Y=0|x)=1-\pi(x)\]</span>则其似然函数为<span class="math display">\[\prod_{i=1}^N{[\pi(x_i)]^{y_i}}{[1-\pi(x_i)]^{1-y_i}}\]</span>对数似然函数为<span class="math display">\[\begin{align*}L(\omega)&amp;=\sum_{i=1}^N[y_i \log{\pi(x_i)}+(1-y_i)\log(1-\pi(x_i))]\\&amp;=\sum_{i=1}^N[y_i\log{\frac{\pi(x_i)}{1-\pi(x_i)}}+\log(1-\pi(x_i))]\\&amp;=\sum_{i=1}^N[y_i(\omega\cdot x_i)-\log(1+exp(\omega\cdot x_i))]\end{align*}\]</span><p>对<span class="math inline">\(L(\omega)\)</span>求极大值，得到，具体求法参考<a href="http://www.mysry.com/2017/11/11/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B1%82%E8%A7%A3%E6%97%A0%E7%BA%A6%E6%9D%9F%E6%9C%80%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%B3%95/">几种常见的求无约束最优化问题的方法</a></p><h2 id="多项logistic-regression">多项Logistic Regression</h2><p>  上面我们谈到的都是二项Logistic Regression，用于二分类，可以将其推广为多项回归模型，用于多分类，假设离散随机变量Y的取值集合为<span class="math inline">\(\{1,2,...,K\}\)</span>，那么多项Logistic Regression模型是:<span class="math display">\[P(Y=k|x)=\frac{exp(\omega_k\cdot x)}{1+\sum_{k=1}^{K-1}exp(\omega_k\cdot x)}, k=1,2,...,K-1\]</span> <span class="math display">\[P(Y=K|x)=\frac{1}{1+\sum_{k=1}^{K-1}exp(\omega\cdot x)}\]</span>这里<span class="math inline">\(x\in R^{n+1}\)</span>,<span class="math inline">\(\omega\in R^{n+1}\)</span>.</p><h2 id="logistic-regression是softmax回归k2时的特例更多内容请查阅softmax">Logistic Regression是Softmax回归<span class="math inline">\(K=2\)</span>时的特例，更多内容请查阅<a href="http://www.mysry.com/">Softmax</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sigmoid-函数&quot;&gt;Sigmoid 函数&lt;/h2&gt;
&lt;p&gt;  在介绍逻辑回归前我们先引入sigmoid函数，其数学形式是&lt;span class=&quot;math display&quot;&gt;\[g(x) =\frac{1}{1+e^{-x}}\]&lt;/span&gt;sigmoid函
      
    
    </summary>
    
    
      <category term="Machine learning" scheme="http://www.mysry.com/tags/Machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>36. Valid Sudoku</title>
    <link href="http://www.mysry.com/2017/11/17/36-Valid-Sudoku/"/>
    <id>http://www.mysry.com/2017/11/17/36-Valid-Sudoku/</id>
    <published>2017-11-17T01:42:01.000Z</published>
    <updated>2017-11-17T01:48:20.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><font color="black">Problem:</font></h2><blockquote><p>Determine if a Sudoku is valid, and click <a href="http://sudoku.com.au/TheRules.aspx" target="_blank" rel="external">the Rules</a> to see more details. Note: A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p></blockquote><h2 id="idea"><font color="red">Idea:</font></h2><p> Collect the set of things we see, encoded as strings. For example:</p><ul><li>‘4’ in row 7 is encoded as “(4)7”.</li><li>‘4’ in column 7 is encoded as “7(4)”.</li><li>‘4’ in the top-right block is encoded as “0(4)2”.</li></ul><p> Scream false if we ever fail to add something because it was already added (i.e., seen before).</p><h2 id="java-code"><font color="orange">Java Code:</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">    public boolean isValidSudoku(char[][] board) &#123;</div><div class="line">       Set seen = new HashSet() ;</div><div class="line">        for (int i=0;i&lt;9;++i)&#123;</div><div class="line">            for (int j=0;j&lt;9;++j)&#123;</div><div class="line">                char number = board[i][j];</div><div class="line">                if(number!= &apos;.&apos;)</div><div class="line">                    if(!seen.add(number+&quot; in row &quot;+ i)||!seen.add(number +&quot; in colomn &quot;+j)||!seen.add(number+&quot; in block &quot;+i/3+&quot;-&quot;+j/3))</div><div class="line">                        return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;problem&quot;&gt;&lt;font color=&quot;black&quot;&gt;Problem:&lt;/font&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Determine if a Sudoku is valid, and click &lt;a href=&quot;http://sudoku.c
      
    
    </summary>
    
    
      <category term="leetcode" scheme="http://www.mysry.com/tags/leetcode/"/>
    
  </entry>
  
</feed>
